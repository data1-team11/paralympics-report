[
  {
    "objectID": "transport.html",
    "href": "transport.html",
    "title": "Transport",
    "section": "",
    "text": "For our swimming route we chose a path through the following coordinates.\n\n52.370631, 4.912138\n52.366824, 4.906239\n52.365795, 4.908870\n52.364477, 4.901910\n52.362811, 4.902780\n52.363131, 4.904473\n52.362023, 4.905010\n52.363891, 4.914505\n52.363334, 4.916339\n52.365548, 4.921682\n52.366120, 4.921192\n52.367123, 4.918531\n52.368649, 4.919936\n52.367450, 4.924110\n52.371675, 4.912920\n52.372894, 4.913767\n52.373418, 4.915827\n\n(52.373418, 4.915827)\n\n\nCreating the lists for our dataframe of coordinates\n\nlongitude = ['52.370631','52.366824','52.365795','52.364477','52.362811','52.363131','52.362023','52.363891','52.363334','52.365548','52.366120','52.367123','52.368649','52.367450','52.371675','52.372894','52.373418']\nlatitude = ['4.912138','4.906239','4.908870','4.901910','4.902780','4.904473','4.905010','4.914505','4.916339','4.921682','4.921192','4.918531','4.919936','4.924110','4.912920','4.913767','4.915827']\n#print(len(latitude))\n#print(coordinates)\n\n17\n\n\nBelow we calculate the center of the nodes of the swimming route.\n\nimport pandas as pd\nimport plotly as pl\n\nimport osmnx as ox\nimport pickle\n\ndf = pd.DataFrame(longitude)\n\ncolumns=['longitude']\ndf.columns = columns\n\ndf.insert(1, 'latitude', latitude)\n#print(df)\n\nlongnum = pd.to_numeric(longitude)\nlatnum = pd.to_numeric(latitude)\n\ndf.insert(0, 'longnum', longnum)\ndf.insert(1, 'latnum', latnum)\nprint(df)\n\navg_lon =(df.longnum.sum()/len(longnum))\navg_lat =(df.latnum.sum()/len(latnum))\n\nstart_swim = (df.longnum[0],df.latnum[0])\nfinish_swim = (df.longnum[16],df.latnum[16])\n\n#center of the nodes of the swimming route\ncenter = (avg_lon, avg_lat)\n\nprint(center)\n#print(start_swim)\n#print(df.longnum[16])\n\n      longnum    latnum  longitude  latitude\n0   52.370631  4.912138  52.370631  4.912138\n1   52.366824  4.906239  52.366824  4.906239\n2   52.365795  4.908870  52.365795  4.908870\n3   52.364477  4.901910  52.364477  4.901910\n4   52.362811  4.902780  52.362811  4.902780\n5   52.363131  4.904473  52.363131  4.904473\n6   52.362023  4.905010  52.362023  4.905010\n7   52.363891  4.914505  52.363891  4.914505\n8   52.363334  4.916339  52.363334  4.916339\n9   52.365548  4.921682  52.365548  4.921682\n10  52.366120  4.921192  52.366120  4.921192\n11  52.367123  4.918531  52.367123  4.918531\n12  52.368649  4.919936  52.368649  4.919936\n13  52.367450  4.924110  52.367450  4.924110\n14  52.371675  4.912920  52.371675  4.912920\n15  52.372894  4.913767  52.372894  4.913767\n16  52.373418  4.915827  52.373418  4.915827\n(52.36681141176471, 4.9129546470588235)\n\n\n\nimport osmnx as ox\nimport pickle\nimport matplotlib.pyplot as plt\nimport networkx as nx\nimport gpxpy\nimport gpxpy.gpx\nimport codecs\nimport requests\nimport geopandas as gpd\nimport geopy.distance as geo\nimport json\nimport plotly as py\nfrom shapely.geometry import Point, Polygon\nimport plotly.express as px\n\n\ncenter = (avg_lon, avg_lat)\n\ntags = {'highway':['bus_stop'], 'public_transport':['stop_area', 'stop_position']} \ntags_10min = {'amenity':['cafe', 'restaurant', 'bar', 'pub']}\ntags1 = {'building': True} #'waterway': True\n\ngdf = ox.features.features_from_point(center, tags = tags, dist = 1300)#= {'public_transport':['stop_area','stop_position', 'platform']}, dist = 1000)\ngdf.head()\ngdf.info()\n\ngdf1 = ox.features.features_from_point(center, tags = tags1, dist = 50)\ngdf1.head()\ngdf1.info()\n\n#gdf2 = ox.features.features_from_point(finish_swim, tags = tags_10min, dist = 50)\n#gdf2.head()\n#gdf2.info()\n\n\nlink = \"https://maps.amsterdam.nl/open_geodata/geojson_lnglat.php?KAARTLAAG=TRAMMETRO_PUNTEN_2022&THEMA=trammetro\"\nlink_answer = requests.get(link)\ngdf_link_answer = gpd.read_file(link_answer.text)\n\ngdf_link_answer['distance'] = gdf_link_answer['geometry'].apply(lambda stop: geo.great_circle(finish_swim, (stop.y, stop.x)).meters)\n\n\nstops = gdf_link_answer.nsmallest(5, 'distance')\nprint(stops)\n\n&lt;class 'geopandas.geodataframe.GeoDataFrame'&gt;\nMultiIndex: 201 entries, ('node', 46350382) to ('node', 10208418533)\nData columns (total 34 columns):\n #   Column                  Non-Null Count  Dtype   \n---  ------                  --------------  -----   \n 0   name                    201 non-null    object  \n 1   public_transport        201 non-null    object  \n 2   railway                 86 non-null     object  \n 3   tram                    75 non-null     object  \n 4   wheelchair              74 non-null     object  \n 5   wikidata                71 non-null     object  \n 6   geometry                201 non-null    geometry\n 7   bus                     117 non-null    object  \n 8   source                  1 non-null      object  \n 9   note                    3 non-null      object  \n 10  ref:IFOPT               40 non-null     object  \n 11  level                   1 non-null      object  \n 12  toilets:wheelchair      3 non-null      object  \n 13  network                 8 non-null      object  \n 14  station                 6 non-null      object  \n 15  subway                  8 non-null      object  \n 16  zone                    25 non-null     object  \n 17  name:de                 26 non-null     object  \n 18  ref                     8 non-null      object  \n 19  train                   5 non-null      object  \n 20  name:es                 1 non-null      object  \n 21  name:nl                 2 non-null      object  \n 22  old_name                6 non-null      object  \n 23  bench                   42 non-null     object  \n 24  bin                     34 non-null     object  \n 25  highway                 59 non-null     object  \n 26  lit                     23 non-null     object  \n 27  operator                7 non-null      object  \n 28  shelter                 49 non-null     object  \n 29  tactile_paving          27 non-null     object  \n 30  covered                 1 non-null      object  \n 31  wheelchair:description  1 non-null      object  \n 32  check_date:shelter      2 non-null      object  \n 33  website                 1 non-null      object  \ndtypes: geometry(1), object(33)\nmemory usage: 63.9+ KB\n&lt;class 'geopandas.geodataframe.GeoDataFrame'&gt;\nMultiIndex: 18 entries, ('way', 26525263) to ('way', 860196314)\nData columns (total 15 columns):\n #   Column             Non-Null Count  Dtype   \n---  ------             --------------  -----   \n 0   geometry           18 non-null     geometry\n 1   nodes              18 non-null     object  \n 2   building           18 non-null     object  \n 3   name               4 non-null      object  \n 4   ref:bag            15 non-null     object  \n 5   shop               1 non-null      object  \n 6   source             15 non-null     object  \n 7   source:date        15 non-null     object  \n 8   start_date         15 non-null     object  \n 9   wikidata           2 non-null      object  \n 10  wikimedia_commons  2 non-null      object  \n 11  height             1 non-null      object  \n 12  name:de            2 non-null      object  \n 13  name:nl            1 non-null      object  \n 14  wikipedia:nl       1 non-null      object  \ndtypes: geometry(1), object(14)\nmemory usage: 3.1+ KB\n                      Naam Modaliteit Lijn Lijn_select  RADIUS  \\\n121   Muziekgebouw Bimhuis       Tram   26          26       5   \n122     Kattenburgerstraat       Tram   26          26       5   \n76                   Artis       Tram   14          14       5   \n34   Eerste Coehoornstraat       Tram    7           7       5   \n223     Plantage Lepellaan       Tram   14          14       5   \n\n                         Label                  geometry    distance  \n121  26 - Muziekgebouw Bimhuis  POINT (4.91302 52.37725)  466.432472  \n122    26 - Kattenburgerstraat  POINT (4.92158 52.37612)  492.763524  \n76                  14 - Artis  POINT (4.91117 52.36663)  818.541501  \n34   7 - Eerste Coehoornstraat  POINT (4.92646 52.36827)  921.032540  \n223    14 - Plantage Lepellaan  POINT (4.91548 52.36513)  921.818880  \n\n\n\ncityswim = ox.graph.graph_from_point(center, dist = 1300, network_type='all', dist_type='network')\n\nnorth = float(avg_lat)+.1\nsouth = float(avg_lat)-.1\nwest = float(avg_lon)-.1\neast = float(avg_lon)+.1\n\nedges_map = Polygon([(west, north), (east, north), (east, south), (west, south), (west, north)])\n#water =ox.geometries.geometries_from_bbox(north, south, east, west, tags={'natural' : 'water'})\n#water = water.clip(edges_map)\n\nfig, ax = plt.subplots(figsize=(10,10))\nax.set_aspect('equal')\nax.set_facecolor('white')\n\nox.plot_graph(cityswim, edge_color='grey',\n                        node_size=0,\n                        show=False, close=False, ax=ax,)\n\ngdf.plot(ax=ax, markersize = 20, color =\"red\") #closest bus stops\nstops.plot(ax=ax, markersize = 20, color = \"orange\")\ngdf1.plot(ax=ax, color = \"purple\") #We determine a 50m radius for the close buildings in order to ssign the HQ of the race.\n#gdf2.plot(ax=ax, color = \"dark green\")\n#water.plot(ax=ax, color=\"lightblue\")\n\nplt.savefig(\"publictransport.png\")\n\n\n\n\nWe used the available data to find the capacity of public transport. We have 5 tram stops wihtin 1 km. The tram passes about 5-10 times and hour so averaging 7.5 times an hour. A tram has 60 seats and a 125 standing spaces [@(GVB, 2023; Wikipedia-bijdragers, 2022)]. The capacity of public transport is calculated below.\n\n#Our endpoint and startpoint were assigned earlier as finish_swim and start_swim\n#the center coordinates are calculated above as avg_lon, avg_lat\n\ntime_seconds = 10*60\nspeed = 4*1000/3600\nwdistance = time_seconds * speed\nprint(wdistance)\n\n#we calculate centrality for the street network around the swimming route and include the nodes at 666m distance. \n#we use network_type is all to include the bridges around Marine terrain\n\ncentral_finish = ox.graph.graph_from_point(finish_swim, dist = wdistance, network_type='all')\ncentral_start = ox.graph.graph_from_point(start_swim, dist = wdistance, network_type='all')\n\n#find nearest nodes to the coordinates of the finish and headquarter\nclosest_finish = ox.distance.nearest_nodes(central_finish, df.longnum[16], df.latnum[16], return_dist=True)\nprint(closest_finish)\n\nclosest_start = ox.distance.nearest_nodes(central_start, df.longnum[0], df.latnum[0], return_dist=True)\nprint(closest_start)\n\ncentrality_finish = nx.closeness_centrality(central_finish, 46366390)\ncentrality_start = nx.closeness_centrality(central_start, 46365861)\nprint(\"The centrality of the finish is\", centrality_finish, \", and the centrality of the start is\", centrality_start)\n\n666.6666666666667\n(46366390, 6823208.798913781)\n(46365861, 6823644.953020242)\nThe centrality of the finish is 0.0 , and the centrality of the start is 0.0390860200493787\n\n\n\nThe low numbers mean that the ‘finish_swim’ and ‘start_swim’ are easily accesible as a lower centrality number means the nodes are better connected."
  },
  {
    "objectID": "energy.html",
    "href": "energy.html",
    "title": "Energy",
    "section": "",
    "text": "The Municipality is worried that the canal and support boats might pollute the air with their diesel engines. Since the Municipality wants to create ideal conditions for the swimmers so that they can set records, we need to see if their concern is warranted and what should or could be done to improve conditions. Amsterdam also wants to advertise this event as a Neutral energy Event (NEE).\nHere we list some key information in regards to how we tackled the problem of planning such event. The following chart presents the key elements to know, their sources and their formats."
  },
  {
    "objectID": "energy.html#minimising-exposure-to-pollution-from-dieselfossil-fuel-driven-boats",
    "href": "energy.html#minimising-exposure-to-pollution-from-dieselfossil-fuel-driven-boats",
    "title": "Energy",
    "section": "Minimising exposure to pollution from diesel/fossil fuel driven boats",
    "text": "Minimising exposure to pollution from diesel/fossil fuel driven boats\n\nNo. of diesel/fossil fuel driven canal boats\nAs of 2020, there are about 12 550 boats in the canals of Amsterdam, approximately 550 of which are commercial boats, the remaining 12000 are recreational boats. Of the commercial fleet about 75% is emission free, while for recreational boats this percentage is only 5%. (Sterling 2020)\n\n\n\nType\nNo. of boats\n% of boats that are emission free\n\n\n\n\nCommercial\n550\n75\n\n\nRecreational\n12550\n5\n\n\n\n\n# //TODO code for computing number of diesel/fossil fuel driven and electrical driven boats\n\n\n\nPeak times for canal boats\nTo create ideal conditions for the swimmers, we look towards hosting the event outside of ‘rush hours’ on the canals, to minimise impact of pollution from boats. This would also help ensure the continuity of boat traffic.\nAs can be seen in the figure below (Snelder, Minderhoud, and Calvert 2013) (no raw data available), the busiest hours on the water usually start around 15:00. For that reason the swimming event should be finished before 15:00.\n\n\n\nimage\n\n\nTo determine the ideal start time of the race, we consider the following:\n\nPeople swim at speeds of about 8 km/h. (Thornton 2019)\nRequired length of the swim route is 5km.\nFor safety reasons, each wave of swimmers should have a maximum of 120 swimmers in the group. (Triathlon n.d.)\nWe plan for around 3000 swimmers for the swim meet, similar to the Amsterdam City Swim. (Swim n.d.)\n\n\nLENGTH_OF_ROUTE = 5000 # in meters\nNUM_SWIMMERS_PER_WAVE = 120\n\n# save variable so it can be accessed from other notebooks\n%store NUM_SWIMMERS_PER_WAVE \n%store LENGTH_OF_ROUTE\n\n# Original text:\n# As people swim about 8 km/h, each round of 5 km would take approximately 40 minutes. \n# With maximum 120 swimmers per group it would take 25 waves to accommodate all 3000 swimmers. \n# //TODO compute start time of event\n\nStored 'NUM_SWIMMERS_PER_WAVE' (int)\nStored 'LENGTH_OF_ROUTE' (int)\n\n\nThus, the first wave of the race starts at 7:00 am with a next wave going every 20 minutes, this way the last wave will be out of the water by 15:00."
  },
  {
    "objectID": "energy.html#energy-use-of-boats",
    "href": "energy.html#energy-use-of-boats",
    "title": "Energy",
    "section": "Energy use of boats",
    "text": "Energy use of boats\n\nEnergy requirements for canal boats in general\n\nEnergy use of canal boats compared to other activities\n// TODO Try to compare the energy use of the canal boats to some other activities in the city. Use canal boats more or less energy in relation to their carbon footprint compared to these other activities? (Refer to previous first table for info & reference)\n\n\nEconomic feasibility of switching canal boats to clean energy\nCost of converting boats to electric: * Building new electric canal boat: 1m euros; * Converting existing canal boat to electrical: 50,000 euros; * Converting recreational boats to electrical: 4,000 – 40,000 euros depending on size; * Installation chargers: 100 boat charging stations installed by end 2021 + floating charging station by Skoon Energy to help with grid balancing\n//TODO clean up\nArticle\n\n\n\nEnergy requirements for support boats for the event\n\nNumber of support boats required\nDrawing on other event data, here we list guidelines and recommendations taken by other organizers in Open Swimming competitions worldwide.\n\n\n\n#\nParameter\nSummary\nSource\nFormat\n\n\n\n\n1.\nOpen Water Swimming Manual 2022\n“There must be sufficient safety craft or escort craft located on the course to immediately recognize when a swimmer is in distress and to initiate an immediate rescue response after observation or notification that a swimmer’s rescue is required.\nManual\nManual\n\n\n2.\nOpen Water Swimming Manual 2022\nthere should also be stationary safety craft located every 400 meters along the course, with a CPR- and life support-trained responder on board\nManual\nManual\n\n\n3.\nBritish Triathlon Open Water Swiming Safety Guidelines\n“Safety cover, safety craft and / or canoes must be provided on the water. Personnel assigned to water safety must be in the ratio of 1 to, at most, every 20 competitors. Emergency exit points should be available for swimmers to leave the water and separate exit points should be available for safety craft.”\nGuidelines\nGuidelines\n\n\n\nThe safety of all swimmers must be ensured during the whole duration of the race. During the event safety measures consist of:\n\nLifeguards in canoes;\nAs advised by the Open Water Swimming Safety Guide for Multi-Sport Events from the British Triathlon organisation boats should be in the water to be able to rescue swimmers in distress. A ratio of a minimum of one boat per twenty swimmers is advised in waters where shorelines are easily reachable. A swimmer should also always be within 50 meters range of a lifeguard. (Triathlon n.d.) Since most of the chosen route goes through canals it is deemed unsafe to have boats sailing so close alongside the swimmers. For that reason, lifeguards will be present every 50 meters in canoes instead of on boats.\nThis also contributes to the sustainability of the event. As mentioned previously, diesel engine boats are highly polluting and the resultant water toxicity can remain in the water for up to 14 days after the use of boats (Jüttner et al. 1995), so no fossil fuel boats should be used as support boats.\nSafety platforms in the water;\nTo make sure distressed swimmers can easily leave the water platforms are placed every 100m alongside the swimming route where quay walls make exiting the water difficult.\n\n\nMAX_DISTANCE_BETWEEN_LIFEGUARDS = 50\nNUM_SWIMMERS_PER_SUPPORT_BOAT = 20\n# Retrieve variables stored in other notebooks\n%store -r NUM_SWIMMERS_PER_WAVE\n%store -r LENGTH_OF_ROUTE\n\nnum_boats_required = NUM_SWIMMERS_PER_WAVE / NUM_SWIMMERS_PER_SUPPORT_BOAT\nnum_lifeguards_required = LENGTH_OF_ROUTE / MAX_DISTANCE_BETWEEN_LIFEGUARDS\nnum_lifeguard_canoes_required = max(num_boats_required, num_lifeguards_required)\n\nprint(\"No. of lifeguard canoes required = max({}, {}) = {}\".format(num_boats_required, num_lifeguards_required, num_lifeguard_canoes_required))\n\nNo. of lifeguard canoes required = max(6.0, 100.0) = 100.0\n\n\nKnowing that canals are too narrow for boats to navigate safely with swimmers around, lifeguards alongside the canals, along with platforms every 100m where quay walls are steep would suffice.\n\n\nEnergy requirements for support boats\n100 canoes are used for the safety of swimmers, by using canoes instead of electric boats a lot of greenhouse gas emission is prevented. If we were to use electric boats electricity would have been used. Exactly how much energy we are saving by using canoes is calculated below.\n\nnum_canoes = 100\npower_boat_kwh = 20\ntime_race = 7\n\npower_use = num_canoes*power_boat_kwh*time_race\nprint('Used power by boats:',power_use, 'kWh')\n\nUsed power by boats: 14000 kWh\n\n\n\n\nSolar panels or wind turbines required\nAssuming that solar panels would be rented and installed for a week to power the boats the amount of solar panels needed is calculated below. Numbers about efficiency of solar panels are found at (Voltasolar 2023).\n\nwp_sp = 365\nkWh_year = wp_sp *0.85\nkWh_week = kWh_year/52\nsp_needed = power_use/kWh_week\nprint('Number of solar panels needed:', int(sp_needed)+1)\n\nNumber of solar panels needed: 2347\n\n\n//TODO is it possible to accommodate the solar panels within the city?"
  },
  {
    "objectID": "energy.html#pollution-impact-of-boats",
    "href": "energy.html#pollution-impact-of-boats",
    "title": "Energy",
    "section": "Pollution impact of boats",
    "text": "Pollution impact of boats\nDue to the lack of exhaust gas treatment systems in boat engines, as found in all modern car engines, a modern 5 horsepower 4-stroke outboard engine can be as polluting as 39 passenger cars driving at 95 km/h. (Propel 2022) While we do not know the detailed relationship between boat traffic and water quality, we do know that water toxicity as a result of fossil fuelled boats can stay present up to 14 days after the use of boats (Jüttner et al. 1995). As such, water quality should improve if there are fewer or no canal boats using fossil fuels for at least two weeks prior to the event."
  },
  {
    "objectID": "energy.html#conclusion",
    "href": "energy.html#conclusion",
    "title": "Energy",
    "section": "Conclusion",
    "text": "Conclusion\nThe swim meet is proposed to be conducted from 07:00 to 15:00 pm, with the following route:\n\n\n\nRoute 3"
  },
  {
    "objectID": "airbnb_listings_JJ.html",
    "href": "airbnb_listings_JJ.html",
    "title": "Team 11",
    "section": "",
    "text": "on:\n  workflow_dispatch:\n  push:\n    branches: main\n\nname: Quarto Publish\n\njobs:\n  build-deploy:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v4\n\n      - name: Set up Quarto\n        uses: quarto-dev/quarto-actions/setup@v2\n\n      - name: Render and Publish\n        uses: quarto-dev/quarto-actions/publish@v2\n        with:\n          target: gh-pages\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\ntax hotels = 7% of turnover + 3 euros per room tax airbnb = 10% = 3 euros number of visitors = 30000 max profit = all visitors airbnb (depends on price) min profit = all visitors hotels (depends on price)\nfrom airbnb listings: discard listings with minimum stays of more than 7 nights #check sum the total ammount of people that fit the remaining airbnbs accomodate (19812) calculate average price of accomodation remaining listings for the remaining visitors (11188) they will stay in hotels average of 2.2 beds per room divide the number of rooms between the remaining tourists\nmultiply number of available beds to average price\nsum airbnb + hotels taxes accordingly\n\nimport pandas as pd\n\ncsv_data = list()\nlistings = open(\"listings_full.csv\", 'r', encoding='latin1')\nfor line in listings:\n    data = line.split(',')\n    csv_data.append(data)\n\nlistings.close()\n\ndf = pd.read_csv(\"listings_full.csv\",encoding='latin1')\n\n#ok_listings = pd.DataFrame(df.columns)\n#print(df.columns)\n#print(df.columns[34])\n#print(df.maximum_nights)\n\n#we discard listings with minimum stays of more than 7 nights\nok_listings = df[(df['minimum_nights'] &lt; 8)]\n\n#we check that all numeric values in our DataFrame sum\ntest = ok_listings.sum(axis=0,numeric_only=True)\n\n#we sum individually the column 'accommodates' so we can retrieve the number of people who can stay in the \nno_ppl = ok_listings.accommodates.sum()\n\nprint('Number of Airbnb listings with at most 7 days of minimal nights :', no_ppl)\n#print(test) success\n\ntourists = 30000\n\ntourists_hotel = tourists-no_ppl\n\nprint('Number of people who needs to stay in hotel rooms',': ', tourists_hotel)\n#print(ok_listings)\n\n#Average cost of overnight accommodation in Amsterdam in the Netherlands from January 2019 to June 2023\n##https://www.statista.com/statistics/614061/overnight-accommodation-costs-amsterdam-city/\n\nhotel_price_per_night = 294\n\n#https://www.cbs.nl/en-gb/figures/detail/84040ENG\n#Hotels; capacity, type of accommodation, beds, star rating\n\nhotel_rooms_ams = 41840\nhotel_beds_ams = 90918\n\navg_beds_per_room = hotel_beds_ams/hotel_rooms_ams\n\n#print(avg_beds_per_room)\n\n#Number of hotel rooms used by tourists who don't fit in airbnbs\nno_hotel_rooms_used = tourists_hotel/avg_beds_per_room\n\nrevenue_hotels = no_hotel_rooms_used*hotel_price_per_night\n\ntax_hotels = revenue_hotels * 0.07 + no_hotel_rooms_used * 3\n\n#getting rid of $ signs in column\nnew_price = df['price'].str.slice(1,-1)\n\n#adding new_price as a column in our dataframe\nok_listings['new_price'] = new_price\n\n#converting new column values to float so we can math it up =P\nok_listings['new_price'] = ok_listings['new_price'].astype(float)\n\n#calculating total revenue of airbnb by summing all location price per night and then times 7 (number of days in a week)\nrevenue_airbnb = ok_listings.new_price.sum()*7\n\ntax_airbnb = float(revenue_airbnb)*.1 + float(len(new_price)*3)\n\nprint('Total tax revenue from Airbnb locations $', tax_airbnb)\nprint('Total tax revenue from hotel rooms $',tax_hotels)\n\ntotal_revenue = tax_airbnb + tax_hotels\n\nprint('Total tax revenue gathered for the government', total_revenue)\n\nNumber of Airbnb listings with at most 7 days of minimal nights : 23407\nNumber of people who needs to stay in hotel rooms :  6593\nTotal tax revenue from Airbnb locations $ 1469360.9000000001\nTotal tax revenue from hotel rooms $ 71543.25226687785\nTotal tax revenue gathered for the government 1540904.152266878\n\n\nC:\\Users\\jjcor\\AppData\\Local\\Temp\\ipykernel_17568\\79030070.py:11: DtypeWarning: Columns (0) have mixed types. Specify dtype option on import or set low_memory=False.\n  df = pd.read_csv(\"listings_full.csv\",encoding='latin1')\nC:\\Users\\jjcor\\AppData\\Local\\Temp\\ipykernel_17568\\79030070.py:63: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  ok_listings['new_price'] = new_price\nC:\\Users\\jjcor\\AppData\\Local\\Temp\\ipykernel_17568\\79030070.py:66: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  ok_listings['new_price'] = ok_listings['new_price'].astype(float)\n\n\nFilter from dataframe the locations of airbnb Gather the different categories inside the column neighourhood Sum each category inside neighbourhood\n\n#It can't get mpre efficient than this\nimport plotly.express as px\nprint('Number of Airbnb listings per neighbourhood:', ok_listings.neighbourhood_cleansed.value_counts())\nfigure = px.bar(ok_listings[neighbourhood].value_counts, x='neighbourhood', y='number')\nfigure.show()\n\nNumber of Airbnb listings per neighbourhood: neighbourhood_cleansed\nDe Baarsjes - Oud-West                    1329\nCentrum-West                               973\nDe Pijp - Rivierenbuurt                    898\nCentrum-Oost                               766\nZuid                                       571\nWesterpark                                 561\nOud-Oost                                   475\nBos en Lommer                              399\nOud-Noord                                  389\nOostelijk Havengebied - Indische Buurt     304\nWatergraafsmeer                            249\nNoord-West                                 212\nIJburg - Zeeburgereiland                   173\nSlotervaart                                156\nNoord-Oost                                 135\nGeuzenveld - Slotermeer                    110\nBuitenveldert - Zuidas                      96\nDe Aker - Nieuw Sloten                      67\nBijlmer-Centrum                             47\nGaasperdam - Driemond                       45\nOsdorp                                      43\nBijlmer-Oost                                37\nName: count, dtype: int64\n\n\nNameError: name 'neighbourhood' is not defined\n\n\n\n#pip install geopy\n\nimport certifi\nimport ssl\nimport geopy.geocoders\nfrom geopy.geocoders\nimport Nominatim, Photon\n\n# Workaround to fix SSL certififcate expired error on some laptops\n# Solution taken from https://stackoverflow.com/a/50665487\n# Error message:\n#   GeocoderUnavailable: HTTPSConnectionPool(host='nominatim.openstreetmap.org', port=443): \n#   Max retries exceeded with url: /reverse?lat=52.40164&lon=4.95106&format=json&addressdetails=1 \n#   (Caused by SSLError(SSLCertVerificationError(1, '[SSL: CERTIFICATE_VERIFY_FAILED] \n#   certificate verify failed: certificate has expired (_ssl.c:1006)')))\nctx = ssl.create_default_context(cafile=certifi.where())\ngeopy.geocoders.options.default_ssl_context = ctx\n\ngeolocator = Photon(user_agent='geoapiExercises')\n\n#print(ok_listings.columns)\n\n#New dataframe with only 3 parameters\ngeolocs_airbnb = ok_listings[['latitude', 'longitude']]\n\ngeolocs_airbnb['longitude']=geolocs_airbnb['longitude'].str.replace('.','')\ngeolocs_airbnb.longitude = (geolocs_airbnb.longitude.str[:1] + '.' + geolocs_airbnb.longitude.str[1:])#.astype(float)\n\n# print(geolocs_airbnb.longitude)\n\ngeolocs_airbnb['latitude']=geolocs_airbnb['latitude'].str.replace('.','')\ngeolocs_airbnb.latitude = (geolocs_airbnb.latitude.str[:2] + '.' + geolocs_airbnb.latitude.str[2:])#.astype(float)\n\n#print(type(geolocs_airbnb.latitude[5]))\n\n#print(longitude)\n#print(geolocs_airbnb)\nprint(len(geolocs_airbnb))\nfor i in range(len(geolocs_airbnb)):\n    latitude, longitude = geolocs_airbnb.iloc[i]['latitude'],geolocs_airbnb.iloc[i]['longitude']\n    print(f'{latitude}, {longitude}')\n    location = geolocator.reverse((latitude, longitude), timeout=None)\n    try:\n        street = location.raw['address']['road']\n        geolocs_airbnb.loc[i, 'street'] = street\n    except:\n        pass\n\ngeolocs_airbnb.head()\n\n#adding street as a column in our dataframe\ngeolocs_airbnb['street'] = street\n\n'''\ngeolocator = Nominatim(user_agent= 'tryinams')\nbnb_new = bnb_df[['id', 'latitude','longitude']]\nbnb_new.insert(3,'street','')\n\n# find out the location of per airbnb according to the coordinates\nfor i in range(len(bnb_new)):\n    latitude, longitude = bnb_new.iloc[i]['latitude'], bnb_new.iloc[i]['longitude']\n    location = geolocator.reverse(f\"{latitude},{longitude}\", timeout=None)\n    try:\n        street = location.raw['address']['road']\n        bnb_new.loc[i, 'street'] = street\n    except:\n        pass\n\nbnb_new.head()\n'''\n\n\n#print(geolocs_airbnb.street)\n#It can't get more efficient than this (again)\nprint('Number of Airbnb listings per street:', geolocs_airbnb.street.value_counts())\n\n\nprint(ok_listings.columns[68])\n\nNameError: name 'ok_listings' is not defined\n\n\n\nlicenses = (ok_listings.license.nunique())\nlicense_values =(ok_listings.license.value_counts())\nprint(license_values)\nexemptions = (ok_listings.license.value_counts()['Exempt'])\n\nulicenses = licenses-exemptions\nprint('Number of unique Airbnb licenses in Amsterdam (not counting the exempt values):',ulicenses)\n\nlicense\nExempt                      600\n0363 78AD 8875 790E 3C05     14\nABCD 1234 AB12 89EF A0F9      9\n036341086EC3C2FF2493          7\n0363 A250 F710 53C5 1273      6\n                           ... \n0363 D239 E048 910F 216B      1\n0363 CB7E 060D 07E0 A4DE      1\n0363 45B2 6D92 AA8B 1326      1\n0363 F6A5 F87A D89D 8FC1      1\n0363 2F20 4F53 FB57 2D7F      1\nName: count, Length: 6972, dtype: int64\nNumber of unique Airbnb licenses in Amsterdam (not counting the exempt values): 6372\n\n\n#CONCLUSION: We have more listings than licenses and several ‘exempt’ values. This because these listings already have another sort of license because they either work as hotels or hostels. https://www.airbnb.com/help/article/860"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This is a website created as an assignment for YMS31303 Metropolitan Data 1, one of the courses required for the MSc. Metropolitan Analysis Design and Engineering at the AMS Institute in Amsterdam.\n\nAssignment:\nParis is hosting the Paralympics in 2024. One of the events at the Paralympics is an open water swimming event in the Seine (apparently the water is clean or so the French say). Since the City of Amsterdam thinks it is better than Paris, they want to host an event before the Paralympics, snubbing the Parisians. The idea is to host a 5km. open water swimming event through the canals of Amsterdam. You are asked by the municipality of Amsterdam to advise on the feasibility of the event from the perspective of the safety of the partaking athletes from an environmental perspective. The event is going to be hosted in May.\n\n\nTeam members\n\nChua, Ka Yi\nCorona, Juan José\nvan Winkelen, Youri"
  },
  {
    "objectID": "water.html",
    "href": "water.html",
    "title": "(Swim) water quality of Amsterdam canals",
    "section": "",
    "text": "To host an open water swim meet in the canals of Amsterdam, we must first ensure that the water quality is good enough for swimming. (//TODO citation) Unfortunately, only official bathing sites in the Amsterdam canals are monitored for water quality. Thus, there is limited data available.\nWe do know that there are various factors that affect the quality of water, such as sewage overflows, water currents, temperature and more. (//TODO citation needed) If we had data sampled at appropriate locations and sufficient background knowledge, we would use a model to estimate water pollution levels and how they are affected by weather and canal traffic. For now, we will use the available data for some basic analysis."
  },
  {
    "objectID": "water.html#datasets-found",
    "href": "water.html#datasets-found",
    "title": "(Swim) water quality of Amsterdam canals",
    "section": "Datasets found",
    "text": "Datasets found\nHere is the list of datasets we have identified with regards to water pollution levels, along with the relevant available sources (if existant) of information and their formats.\n\n\n\n#\nParameter\nExplanation\nSource\nFormat\n\n\n\n\n1.\nPollution levels in Herensgracht and Prinsengracht\nChemical composition of the water\nStudy\nJournal\n\n\n2.\nPollution levels in swimming locations\nChemical levels in swimming locations in 2019 with interpreted data\nDataset\nExcel\n\n\n3.\nPlaces with sensors available.\n \n \n \n\n\n4.\nHistorical data for water quality.\n \n \n \n\n\n5.\nSewage overflows\nUsed Python script to convert file to Geojson. CRS = EPSG 28992\nDataset\nJSON\n\n\n6.\nCanal traffic\n???\n???\n???\n\n\n\n\nSewage overflows\nSince Amsterdam uses a combined sewage system, sewage overflows are a major source of water pollution after heavy rain. (Leemans, Supervisor, and Hofstra 2017) We can see if there areas without sewage overflow points in the canals.\nThe Waternet sewerage network data is available on Overheid.nl. Unfortunately, the download link for the WFS data returned a 404 error. Instead, we used the provided API to retrieve the sewage nodes, then saved it to sewer_nodes.geojson. (Coordinate Reference System used is EPSG:7415.) We then filtered the data to get the sewage overflow nodes and saved it to sewage_overflow_nodes.geojson.\n\nfrom urllib.request import urlopen\nimport json\nimport os.path\nimport geopandas as gpd\nfrom pyproj import Transformer\n\nFILENAME_SEWER_NODES = \"data/sewer_nodes.geojson\"\nFILENAME_SEWAGE_OVERFLOW_NODES = \"data/sewage_overflow_nodes.geojson\"\nURL_SEWER_NODES = \"https://api.data.amsterdam.nl/v1/leidingeninfrastructuur/waternet_rioolknopen/?page_size=1000\"\nSEWAGE_OVERFLOW_TYPES = [\n    \"Uitlaat gemengde overstort\", # Mixed overflow\n    \"Uitlaat vuilwater nooduitlaat\", # Black water emergency outlet\n    \"(Externe) overstortput\", # (External) overflow\n    \"Overstort met signalering\", # Overflow with signaling\n    \"Interne overstortput\", # Internal overflow\n    \"Nooduitlaat met signalering\" # Emergency overflow with signaling\n]\n\ndef get_sewer_nodes(url, geojson_filename, is_test_run=False):\n    \"\"\"Return sewer nodes as geodataframe, read from the GeoJSON file.\n    If file does not exist, retrieve the data from the API and save results to the GeoJSON file.\n    If this is a test run and the API is called, only partial results will be retrieved from the API.\n    \n    Parameters:\n        url: API endpoint for sewage networks data\n        geojson_filename: name of file containing (or will contain) the saved sewer nodes data\n        is_test_run: if True, limits number of API requests made (used for debugging)\n    \"\"\"\n\n    if os.path.exists(geojson_filename):\n        print(\"Sewer nodes data has already been parsed to GeoJSON in '{}'\".format(geojson_filename))\n        gdf = gpd.read_file(geojson_filename)\n    else:\n        print(\"Sewer nodes GeoJSON file does not exist. Requesting data from API {}\".format(url))\n        geojson_data = retrieve_sewer_nodes_data_from_api(url, is_test_run)\n        \n        # Save data for future use\n        with open(geojson_filename, \"a+\", encoding='utf-8') as outfile:\n            json.dump(geojson_data, outfile)\n        print(\"Sewer nodes data saved to file '{}'\".format(geojson_filename))\n\n        gdf = gpd.GeoDataFrame.from_features(geojson_data['features'])\n    return gdf\n\ndef retrieve_sewer_nodes_data_from_api(url, is_test_run=False):\n    \"\"\"Return sewer nodes data as GeoJSON. In test runs, limit the number of API requests made.\"\"\"\n   \n    data_entries = request_sewer_nodes_data_from_api(url, is_test_run)\n    geojson_data = parse_sewer_node_results(data_entries)\n\n    return geojson_data\n\ndef request_sewer_nodes_data_from_api(url, is_test_run=False):\n    \"\"\"Retrieve all sewer node results from API. For test runs, stop after first 3 pages of results.\"\"\"\n\n    api_response = json.load(urlopen(url))\n\n    sewer_node_entries = []\n    num_pages_requested = 0\n\n    while api_response is not None:\n        data = api_response[\"_embedded\"][\"waternet_rioolknopen\"]\n        sewer_node_entries += data\n\n        if \"next\" in api_response[\"_links\"]: # has next page of results\n            api_response = json.load(urlopen(api_response[\"_links\"][\"next\"][\"href\"]))\n        else: # is last page of results\n            api_response = None\n\n        num_pages_requested += 1\n\n        if is_test_run and num_pages_requested &gt;= 3:\n            break\n    \n    return sewer_node_entries\n\ndef parse_sewer_node_results(sewer_node_entries):\n    \"\"\"Parse sewer node results from Amsterdam sewer network API to GeoJSON\"\"\"\n\n    transformer = Transformer.from_crs(\"EPSG:7415\", \"EPSG:4326\")\n\n    geojson = {\n        \"type\": \"FeatureCollection\",\n        \"features\": []\n    }\n\n    for entry in sewer_node_entries:\n        x, y, z = entry[\"geometrie\"][\"coordinates\"]\n        lat, lon = transformer.transform(x, y)\n        feature = {\n            \"type\": \"Feature\",\n            \"geometry\": {\n                \"type\": \"Point\",\n                \"coordinates\": [lon, lat]\n            },\n            \"properties\": {\n                \"id\": entry[\"id\"],\n                \"typeKnoop\": entry[\"typeKnoop\"]\n            }\n        }\n        geojson[\"features\"].append(feature)\n    \n    return geojson\n\ndef get_sewage_overflow_nodes(url, sewer_nodes_filename, sewage_overflow_nodes_filename, is_test_run):\n    \"\"\"Return sewage overflow points as geodataframe, read from the GeoJSON file.\n    If file does not exist, get and process the sewer nodes data, then save results to the GeoJSON file.\n    \n    Parameters:\n        url: API endpoint for sewage networks data\n        sewer_nodes_filename: name of GeoJSON file containing (or will contain) the saved sewer nodes data\n        sewage_overflow_nodes_filename: name of GeoJSON file containing (or will contain) the saved sewage overflow nodes data\n        is_test_run: if True, limits number of API requests made (used for debugging)\n    \"\"\"\n\n    if os.path.exists(sewage_overflow_nodes_filename):\n        print(\"Sewage overflow nodes data already exists in file '{}'\".format(sewage_overflow_nodes_filename))\n        gdf_overflows = gpd.read_file(sewage_overflow_nodes_filename)\n    else:\n        gdf_sewer_nodes = get_sewer_nodes(url, sewer_nodes_filename, is_test_run)\n        gdf_overflows = gdf_sewer_nodes[gdf_sewer_nodes[\"typeKnoop\"].isin(SEWAGE_OVERFLOW_TYPES)]\n        gdf_overflows.to_file(sewage_overflow_nodes_filename)\n        print(\"Sewage overflow nodes data saved to file '{}'\".format(sewage_overflow_nodes_filename))\n    return gdf_overflows\n\n\ngdf_overflows = get_sewage_overflow_nodes(\n    URL_SEWER_NODES, FILENAME_SEWER_NODES, FILENAME_SEWAGE_OVERFLOW_NODES, \n    is_test_run=True\n)\n\nSewage overflow nodes data already exists in file 'data/sewage_overflow_nodes.geojson'\n\n\nWe then plot the sewage overflow points on a map.\n\n# pip install folium matplotlib mapclassify\n\nimport folium\n\nmap_of_sewage_overflow_nodes = gdf_overflows.explore(\n    legend=True,  # show legend\n    name=\"Sewage Overflow Points\",\n)\n\n\nfolium.TileLayer(\"CartoDB positron\", show=False).add_to(\n    map_of_sewage_overflow_nodes\n)\n\nmap_of_sewage_overflow_nodes\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\nObserve that there are fewer sewage overflow points in the northeast area of Amsterdam’s canals, near Marineterrein. Assuming water pollution dissipates quickly with distance from the sewage overflow point, we can choose a route that avoids most of the sewer nodes to ensure better water quality for the swim.\n\n\nCanal Traffic\nBoat traffic is another source of water pollution. Due to the lack of exhaust gas treatment systems in boat engines, as found in all modern car engines, a modern 5 horsepower 4-stroke outboard engine can be as polluting as 39 passenger cars driving at 95 km/h. (Propel 2022) As of 2020, there are about 12 550 boats in the canals of Amsterdam, approximately 550 of which are commercial boats, the remaining 12000 are recreational boats. Of the commercial fleet about 75% is emission free, while for recreational boats this percentage is only 5%. (Sterling 2020)\nWhile we do not know the detailed relationship between boat traffic and water quality, we do know that water toxicity as a result of fossil fuelled boats can stay present up to 14 days after the use of boats (Jüttner et al. 1995). Thus, one possibility is to limit the number of fossil fuelled boats in the two weeks prior to the event."
  },
  {
    "objectID": "water.html#choosing-a-route",
    "href": "water.html#choosing-a-route",
    "title": "(Swim) water quality of Amsterdam canals",
    "section": "Choosing a route",
    "text": "Choosing a route\nSince the Amsterdam City Swim is held annually in the canals, this suggests that an open water swim is feasible. However, we will need to find a suitable 5km route. We have been told to ensure that the event does not impact commercial water transport, and has a small impact on the canal boat routes.\n\nCanal traffic\nTo minimise impact on boat routes, we look for a route that avoids areas of high canal traffic. This would also result in a route with cleaner water.\nWaternet commissioned TNO to produce a model to predict traffic densities in the canal. (Snelder, Minderhoud, and Calvert 2013) The prediction results from the model are as follows (image only, as we do not have access to the raw data):\n\n\n\nimage\n\n\n//TODO commercial routes and canal boat routes\n\n\nAmsterdam City Swim\nWe take reference from the Amsterdam City Swim, which is held every summer in the canals of Amsterdam. We have the routes for 2019 and 2023, both of which are the same, other than the direction.\n\n\n\nAmsterdam City Swim 2019 route\n\n\n\n\n\nAmsterdam City Swim 2023 route\n\n\n\n\n\nAmsterdam City Swim 2019 & 2023 routes\n\n\n\n\nIdentifying potential routes\nBased on the City Swims, Amsterdam Oost seems to be a suitable area for open water swimming events. Visual comparison also shows that Amsterdam Oost has relatively fewer sewage overflow points and less canal traffic.\n\n\n\nAmsterdam Oost\n\n\nThus, we have identified 3 potential 5km routes in this area, indicated in the images below. Our recommendation is the third route, as it traverses the fewest number of sewage overflow points.\n\n\n\nRoute 1\n\n\n\n\n\nRoute 2\n\n\n\n\n\nRoute 3"
  },
  {
    "objectID": "water.html#recommendations",
    "href": "water.html#recommendations",
    "title": "(Swim) water quality of Amsterdam canals",
    "section": "Recommendations",
    "text": "Recommendations\nWe propose the following route, which traverses the fewest number of sewage overflow nodes and avoids areas with high traffic.\n\n\n\nRoute 3\n\n\nHowever, since Waternet recommends people to avoid swimming in the waters for 3 days after heavy rainfall (Waternet n.d.), we would recommend finding an alternative backup route in case there is heavy rainfall prior to the event. It would also be better for water quality should fossil fuelled boats be banned from the area for two weeks before the event, though this may not be economically feasible.\n\nAppendix: automated route finding\nFor comparison purposes, we wrote a script to automatically identify potential routes for the swim.\n//TODO\n\nimport osmnx as ox\nimport networkx as nx\n\nox.config(log_console=True, use_cache=True,\n          useful_tags_way = ox.settings.useful_tags_way + ['canal'])\namsterdam_canals = ox.graph_from_place('Amsterdam, Netherlands', custom_filter='[\"waterway\"=\"canal\"]')\n# matlplot lib is used, sizes go in inches...\nox.plot_graph(amsterdam_canals, figsize=(12,6))\n\nC:\\Users\\ky\\AppData\\Local\\Temp\\ipykernel_18960\\4179915482.py:2: UserWarning: The `utils.config` function is deprecated and will be removed in a future release. Instead, use the `settings` module directly to configure a global setting's value. For example, `ox.settings.log_console=True`.\n  ox.config(log_console=True, use_cache=True,\n\n\n\n\n\n(&lt;Figure size 1200x600 with 1 Axes&gt;, &lt;Axes: &gt;)\n\n\n\nox.graph_to_gdfs(amsterdam_canals, nodes=False).explore()\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n# amsterdam_waterways = ox.graph_from_place('Amsterdam, Netherlands', custom_filter='[\"waterway\"]')\namsterdam_waterways = ox.graph_from_place('Amsterdam, Netherlands', custom_filter='[\"waterway\"~\"canal|river\"]')\n# matlplot lib is used, sizes go in inches...\nox.graph_to_gdfs(amsterdam_waterways, nodes=False).explore()\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\nimport numpy as np\n# waterway_types = list(ox.graph_to_gdfs(amsterdam_waterways)[1]['waterway'])\n# waterway_types\n\n# H = nx.Graph(((u, v, e) for u,v,e in G.edges(data=True) if e['since'] == 'December 2008'))\n# nx.draw(H,with_labels=True,node_size=3000)\n# plt.show()\n\nfor u, v, e in amsterdam_waterways.edges(data=True):\n    print(u, v, e['waterway'])\n\nKeyError: 'waterway'\n\n\n\ndef find_routes_of_length(start_node, graph, route_length):\n       \n    def find_routes_containing_path(curr_node, curr_path, curr_length, graph):\n        if curr_length &gt; route_length: # found valid path\n            # print(\"Found path:\", curr_length, curr_path)\n            return [curr_path]\n        \n        traversed_nodes = [edge[0] for edge in curr_path] + [curr_node]\n        prev_node = curr_path[-1][0] if len(curr_path) &gt; 0 else None\n        incident_edges = graph.edges(curr_node, keys=True)\n        routes_containing_curr_path = []\n        # print(\"Prev node\", prev_node, \"Curr node\", curr_node)\n        for edge in incident_edges:\n            if edge in curr_path or traversed_nodes.count(edge[1]) &gt;= 1 or edge[1] == prev_node:\n                continue\n            new_path = curr_path + [edge]\n            # print(edge, amsterdam_waterways.edges[edge])\n            edge_length = amsterdam_waterways.edges[edge][\"length\"]\n            routes_containing_new_path = find_routes_containing_path(edge[1], new_path, curr_length + edge_length, graph)\n            routes_containing_curr_path.extend(routes_containing_new_path)\n            # print(edge_length, new_path)\n        \n        return routes_containing_curr_path\n    \n    return find_routes_containing_path(start_node, [], 0, graph)\n\n\n\n# Use Marineterrein pool as start point        \nlat, lon = 52.37343358243731, 4.916215248650945\nstart_node = ox.distance.nearest_nodes(amsterdam_waterways, lon, lat, return_dist=False)\n\nroutes = find_routes_of_length(start_node, amsterdam_waterways, 5000)\nprint(\"Found {} routes.\".format(len(routes)))\n\n# 252142901, 331854233, 0),\n#  (331854233, 252142901, 0),\n#  (252142901, 324827507, 0),\n#  (324827507, 305155548, 0),\n#  (305155548, 324827507, 0),\n#  (324827507, 252142901, 0),\n#  (252142901, 8010136114, 0)]\n\n\n# nx.draw_networkx_edges(amsterdam_waterways,edgelist=routes[0])\n# ox.plot_graph_route(amsterdam_waterways, [x for (x, y, k) in routes[0]])\ndef get_route_from_edge_list(edges):\n    return [x for (x, y, k) in routes[0]]\n# route1 = [x for (x, y, k) in routes[0]]\n\n# for edge_list in routes[0:1]:\n# edge_list = routes[5]\n# route = get_route_from_edge_list(edge_list)\n# route_edges = ox.utils_graph.route_to_gdf(amsterdam_waterways, route)\n# route_edges.explore(tiles=\"cartodbpositron\", style_kwds={\"weight\": 5})\n# print(routes)\n# edge_list = routes[2]\n# route = get_route_from_edge_list(edge_list)\n# route_edges = ox.utils_graph.route_to_gdf(amsterdam_waterways, route)\n# route_edges.explore(tiles=\"cartodbpositron\", style_kwds={\"weight\": 5})\nprint(type(routes))\n\nNameError: name 'routes' is not defined\n\n\n\ndef edge_list_to_gdf(graph, edge_list):\n    node_list = [x for (x, y, k) in edge_list]\n    node_list.append(edge_list[-1][1])\n    # pairs = zip(route[:-1], route[1:])\n    # uvk = ((u, v, min(G[u][v].items(), key=lambda i: i[1][weight])[0]) for u, v in pairs)\n    return ox.utils_graph.graph_to_gdfs(graph.subgraph(node_list), nodes=False).loc[edge_list]\n\nedge_list_to_gdf(amsterdam_waterways, routes[0])\n\nNameError: name 'routes' is not defined\n\n\n\n# print(routes[0:3])\n# for i in range(3):\n#     print(routes[i])\n\nsample_routes = routes[0:50]\n# routes = ox.k_shortest_paths(G, orig, dest, k=200, weight=weight)\ngdfs = [edge_list_to_gdf(amsterdam_waterways, route) for route in sample_routes]\n# nodes, edges = ox.graph_to_gdfs(amsterdam_waterways)\n# routes_map = ox.graph_to_gdfs(amsterdam_waterways, edges=False).explore()\n# routes_map = edges.explore(color=\"#222222\", tiles=\"cartodbdarkmatter\")\n\nNameError: name 'routes' is not defined\n\n\n\nnodes_map = ox.graph_to_gdfs(amsterdam_waterways, edges=False).explore()\nm1 = gdfs[0]\nm2 = gdfs[1]\n\n# routes_map = x.explore(m=nodes_map, color=\"cyan\", style_kwds={\"weight\": 5, \"opacity\": 0.05})\n\n# route_edges = ox.utils_graph.route_to_gdf(G, route, weight)\nroutes_map = m1.explore(tiles=\"cartodbpositron\", style_kwds={\"weight\": 5})\n# m2.explore(m=routes_map, color=\"red\")\n\n# for i, route_edges in enumerate(gdfs):\n#     routes_map = route_edges.explore(m=routes_map, color=\"cyan\", style_kwds={\"weight\": 5, \"opacity\": 0.05})\nroutes_map\n\nNameError: name 'gdfs' is not defined\n\n\n\ndef plot_routes_on_map(graph, gdfs, num_routes):\n    colors = ['red', 'orange', 'yellow', 'green', 'blue']\n    routes_map = gdfs[0].explore(color=\"blue\", style_kwds={\"weight\": 5})\n    for i in range(1, num_routes):\n        gdfs[i].explore(m=routes_map, color=colors[i]) #color=\"blue\", style_kwds={\"opacity\": 0.01 * i}) #color=colors[i])\n    return routes_map\n\n\nmyroutes = plot_routes_on_map(amsterdam_waterways, gdfs, 2)\nmyroutes\n\nNameError: name 'gdfs' is not defined\n\n\n\n# ams_address = 'Gebouw 006, Kattenburgerstraat 5, Amsterdam, Netherlands'\n\n# def address_to_nearest_node(address):\n#     lat, lon = ox.geocode(address)\n    # nearest_node_id = ox.distance.nearest_nodes(amsterdam_waterways, lon, lat, return_dist=False)\n    # return nearest_node_id\n\n\namsterdam_waterways.get_edge_data(8991488130, 5954714641).values()\n\nAttributeError: 'NoneType' object has no attribute 'values'"
  },
  {
    "objectID": "airbnb_listings.html",
    "href": "airbnb_listings.html",
    "title": "Team 11",
    "section": "",
    "text": "#Key figures about taxes for hotels and airbnbs\n\ntax_hotels = 7% of turnover + 3 euros per room\ntax_airbnb = 10% = 3 euros\nnumber_of_visitors = 30000\nmax_profit = all visitors airbnb (depends on price)\nmin_profit = all visitors hotels (depends on price)\n\nhotel_price_per_night = 294\nhotel_rooms_ams = 41840\nhotel_beds_ams = 90918\n\nSources:\n\nAverage cost of overnight accommodation in Amsterdam in the Netherlands from January 2019 to June 2023\nhttps://www.statista.com/statistics/614061/overnight-accommodation-costs-amsterdam-city/\n\nHotels; capacity, type of accommodation, beds, star rating\nhttps://www.cbs.nl/en-gb/figures/detail/84040ENG\n\nSyntaxError: invalid syntax (3055364003.py, line 1)\n\n\n#Pseudocode: the way we identify and tackle the problem\nfrom airbnb listings: discard listings with minimum stays of more than 7 nights #check sum the total ammount of people that fit the remaining airbnbs accomodate (19812) calculate average price of accomodation remaining listings for the remaining visitors (11188) they will stay in hotels average of ___ beds per room divide the number of rooms between the remaining tourists\nmultiply number of available beds to average price\nsum airbnb + hotels taxes accordingly\n#Code\n\nimport pandas as pd\n\ncsv_data = list()\nlistings = open(\"listings_full.csv\", 'r', encoding='latin1')\nfor line in listings:\n    data = line.split(',')\n    csv_data.append(data)\n\nlistings.close()\n\ndf = pd.read_csv(\"listings_full.csv\",encoding='latin1')\n\n#ok_listings = pd.DataFrame(df.columns)\n#print(df.columns[42])\n#print(df.columns[34])\n#print(df.maximum_nights)\n\n#we discard listings with minimum stays of more than 7 nights\nok_listings = df[(df['minimum_nights'] &lt; 8)]\n\n#we check that all numeric values in our DataFrame sum\ntest = ok_listings.sum(axis=0,numeric_only=True)\n\n#we sum individually the column 'accommodates' so we can retrieve the number of people who can stay in the \nno_ppl = ok_listings.accommodates.sum()\n\nprint('Number of Airbnb listings with at most 7 days of minimal nights :', no_ppl)\n#print(test) success\n\ntourists = 30000\n\ntourists_hotel = tourists-no_ppl\n\nprint('Number of people who needs to stay in hotel rooms',': ', tourists_hotel)\n#print(ok_listings)\n\nhotel_price_per_night = 294\nhotel_rooms_ams = 41840\nhotel_beds_ams = 90918\n\navg_beds_per_room = hotel_beds_ams/hotel_rooms_ams\n\n#print(avg_beds_per_room)\n\n#Number of hotel rooms used by tourists who don't fit in airbnbs\nno_hotel_rooms_used = tourists_hotel/avg_beds_per_room\nrevenue_hotels = no_hotel_rooms_used*hotel_price_per_night\ntax_hotels = revenue_hotels * 0.07 + no_hotel_rooms_used * 3\n\n#getting rid of $ signs in column\nnew_price = df['price'].str.slice(1,-1)\n\n#adding new_price as a column in our dataframe\nok_listings['new_price'] = new_price\n\n#converting new column values to float so we can math it up =P\nok_listings['new_price'] = ok_listings['new_price'].astype(float)\n\n#calculating total revenue of airbnb by summing all location price per night and then times 7 (number of days in a week)\nrevenue_airbnb = ok_listings.new_price.sum()*7\n\ntax_airbnb = float(revenue_airbnb)*.1 + float(len(new_price)*3)\n\nprint('Total tax revenue from Airbnb locations $', tax_airbnb)\nprint('Total tax revenue from hotel rooms $',tax_hotels)\n\ntotal_revenue = tax_airbnb + tax_hotels\n\nprint('Total tax revenue gathered for the government', total_revenue)\n\nFileNotFoundError: [Errno 2] No such file or directory: 'listings_full.csv'\n\n\nFilter from dataframe the locations of airbnb Gather the different categories inside the column neighourhood Sum each category inside neighbourhood\n\n#It can't get mpre efficient than this\nprint('Number of Airbnb listings per neighbourhood:', ok_listings.neighbourhood_cleansed.value_counts())\n\n\n#pip install geopy\n\nfrom geopy.geocoders import Nominatim\n\ngeolocator = Nominatim(user_agent= 'geoapiExercises',scheme='http')\n\n#print(ok_listings.columns)\n\n#New dataframe with only 3 parameters\ngeolocs_airbnb = ok_listings[['latitude', 'longitude']]\n\ngeolocs_airbnb['longitude']=geolocs_airbnb['longitude'].str.replace('.','')\ngeolocs_airbnb.longitude = (geolocs_airbnb.longitude.str[:1] + '.' + geolocs_airbnb.longitude.str[1:])#.astype(float)\n\nprint(geolocs_airbnb.longitude)\n\ngeolocs_airbnb['latitude']=geolocs_airbnb['latitude'].str.replace('.','')\ngeolocs_airbnb.latitude = (geolocs_airbnb.latitude.str[:2] + '.' + geolocs_airbnb.latitude.str[2:])#.astype(float)\n\n#print(type(geolocs_airbnb.latitude[5]))\n\n#print(longitude)\n#print(geolocs_airbnb)\n\nfor i in range(len(geolocs_airbnb)):\n    latitude, longitude = geolocs_airbnb.iloc[i]['latitude'],geolocs_airbnb.iloc[i]['longitude']\n    print(f'{latitude}, {longitude}')\n    location = geolocator.reverse((latitude, longitude), timeout=None)\n    try:\n        street = location.raw['address']['road']\n        geolocs_airbnb.loc[i, 'street'] = street\n    except:\n        pass\n\ngeolocs_airbnb.head()\n\n#adding street as a column in our dataframe\ngeolocs_airbnb['street'] = street\n\nC:\\Users\\ky\\AppData\\Local\\Temp\\ipykernel_42316\\73104128.py:12: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  geolocs_airbnb['longitude']=geolocs_airbnb['longitude'].str.replace('.','')\nC:\\Users\\ky\\AppData\\Local\\Temp\\ipykernel_42316\\73104128.py:13: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  geolocs_airbnb.longitude = (geolocs_airbnb.longitude.str[:1] + '.' + geolocs_airbnb.longitude.str[1:])#.astype(float)\nC:\\Users\\ky\\AppData\\Local\\Temp\\ipykernel_42316\\73104128.py:17: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  geolocs_airbnb['latitude']=geolocs_airbnb['latitude'].str.replace('.','')\nC:\\Users\\ky\\AppData\\Local\\Temp\\ipykernel_42316\\73104128.py:18: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  geolocs_airbnb.latitude = (geolocs_airbnb.latitude.str[:2] + '.' + geolocs_airbnb.latitude.str[2:])#.astype(float)\nC:\\Users\\ky\\AppData\\Local\\Temp\\ipykernel_42316\\73104128.py:31: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  geolocs_airbnb.loc[i, 'street'] = street\nC:\\Users\\ky\\AppData\\Local\\Temp\\ipykernel_42316\\73104128.py:31: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise in a future error of pandas. Value 'Jisperveldstraat' has dtype incompatible with float64, please explicitly cast to a compatible dtype first.\n  geolocs_airbnb.loc[i, 'street'] = street\nC:\\Users\\ky\\AppData\\Local\\Temp\\ipykernel_42316\\73104128.py:31: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  geolocs_airbnb.loc[i, 'street'] = street\n\n\n0                  4.95106\n1                  4.88521\n2                  4.86826\n3                  4.84802\n4                  4.88303\n               ...        \n8381     4.906180316071500\n8382               4.91108\n8383    4.8480413115376400\n8384             4.8944915\n8385      4.90941136641054\nName: longitude, Length: 8035, dtype: object\n52.40164, 4.95106\n52.38855, 4.88521\n52.37824, 4.86826\n52.34091, 4.84802\n52.37641, 4.88303\n52.34985, 4.83578\n52.37026, 4.89931\n52.36256, 4.89809\n52.36435, 4.94358\n52.36407, 4.89393\n52.38761, 4.89188\n52.36775, 4.89092\n52.36584, 4.89111\n52.37168, 4.91471\n52.327807756778100, 4.87680005722526\n52.38028, 4.89089\n52.37118, 4.93146\n52.36811, 4.88262\n52.35559, 5.1932\n52.35597, 4.88512\n52.36431, 4.93122\n52.37828, 4.8944\n52.36968, 4.88122\n52.35774, 4.89647\n52.34801, 4.83639\n52.35178, 4.90699\n52.3642, 4.92829\n52.39364, 4.94538\n52.3627, 4.85693\n52.37956, 4.89359\n52.36768, 4.86646\n52.37548, 4.89398\n52.35222, 4.84789\n52.36057, 4.89671\n52.36698, 4.86622\n52.3515, 4.89656\n52.37169, 4.89446\n52.36883, 4.88749\n52.36271, 4.85875\n52.36815, 4.88604\n52.36707, 4.87348\n52.36936, 4.90963\n52.37122, 4.88211\n52.34416, 4.88709\n52.35861, 4.86023\n52.35695, 4.85234\n52.37977, 4.85574\n52.36563, 4.88454\n52.35435, 4.87316\n52.37561, 4.9\n52.37561, 4.9\n52.35179, 4.91082\n52.37239, 4.89657\n52.35931, 4.89844\n52.39185, 4.8869\n52.35871, 4.89616\n52.35972, 4.8975\n52.37104, 4.87713\n52.35669, 4.90187\n52.35625, 4.89323\n52.3606, 4.85739\n52.35715, 4.90926\n52.36348, 4.87648\n52.367377549542400, 4.896707133551010\n52.36263, 4.90216\n52.364, 4.87814\n52.35465, 4.9061\n52.35043, 4.84676\n52.36905, 4.93528\n52.36616895271640, 4.938429929316040\n52.3609619140625, 4.88822603225708\n52.341621, 4.849049\n52.37281, 4.94303\n52.37001, 4.85646\n52.37006, 4.90081\n52.3739, 4.89263\n52.3509, 4.83293\n52.3543, 4.87701\n52.36412, 4.88757\n52.37694, 4.88003\n52.39675, 4.99603\n52.35902, 4.89606\n52.35022, 4.8525\n52.37827, 4.88568\n52.39114, 4.88846\n52.354, 4.93965\n52.37126, 4.86241\n52.38444, 4.86916\n52.33558, 4.86878\n52.36864, 4.87943\n52.37079, 4.90153\n52.34904, 4.86765\n52.36112, 4.89462\n52.39144, 4.88436\n52.36022, 4.84346\n52.39442, 4.91478\n52.36918, 4.91316\n52.36809, 4.85436\n52.35567, 4.93175\n52.34788, 4.8506\n52.37621, 4.87075\n52.381996, 4.888583\n52.41016, 4.96369\n52.36247, 4.86534\n52.381996, 4.888583\n52.35094, 4.88552\n52.34918, 4.89197\n52.32237, 4.86024\n52.36976, 4.87374\n52.37167, 4.8948\n52.37098, 4.89434\n52.36188, 4.87694\n52.41878, 4.89397\n52.367889404296800, 4.903494834899900\n52.34557, 4.8962\n52.38296, 4.83786\n52.374, 4.89902\n52.35925, 4.8514\n52.36158, 4.97639\n52.36706, 4.86465\n52.37449, 4.84762\n52.35537, 4.89477\n52.35673, 4.90778\n52.36462, 4.86824\n52.38284, 4.89007\n52.37752, 4.87086\n52.36112, 4.89632\n52.38079, 4.88536\n52.36052, 4.89568\n52.3731, 4.86859\n52.37098, 4.9227\n52.36256, 4.9108\n52.37654, 4.87003\n52.36866, 4.92071\n52.35659, 4.90827\n52.38456, 4.87364\n52.34829, 4.91047\n52.37266, 4.90456\n52.37066, 4.87405\n52.36827, 4.87107\n52.36754, 4.88733\n52.36115, 4.85209\n52.35982, 4.85635\n52.36855, 4.90766\n52.37142, 4.89036\n52.36856, 4.89896\n52.368637074100200, 4.899095646157320\n52.36884, 4.86127\n52.35205, 4.90267\n52.36476, 4.90925\n52.34725, 4.89341\n52.35323, 4.85421\n52.36123, 4.89619\n52.37272, 4.90418\n52.36899, 4.91607\n52.3607, 4.85991\n52.34025, 4.8466\n52.37262, 4.87342\n52.35584, 4.87401\n52.3719, 4.86534\n52.361362, 4.890488\n52.42379, 4.88851\n52.36276624047190, 4.90809768557229\n52.36136245727530, 4.890488147735590\n52.3418, 4.91066\n52.343079, 4.788886\n52.35637, 4.85373\n52.38875, 4.87835\n52.37342, 4.8693\n52.36997595854360, 4.856519718051390\n52.33229, 4.87431\n52.379, 4.87909\n52.35864, 4.87632\n52.35448, 4.93366\n52.3395, 4.84898\n52.3709, 4.85301\n52.356197, 4.991435\n52.4016, 4.89785\n52.3624, 4.86575\n52.37991, 4.87414\n52.35595, 4.79661\n52.35367, 4.85058\n52.35149, 4.92265\n52.319366608363900, 4.9539249224641800\n52.32019, 4.95501\n52.36084550323890, 4.980601130578240\n52.36561, 4.88492\n52.35531, 4.90333\n52.34176, 4.84782\n52.35049, 4.84686\n52.37225, 4.86262\n52.37, 4.95127\n52.37042, 4.91535\n52.35082, 4.8877\n52.381615, 4.877059\n52.36728, 4.85926\n52.3643, 4.89533\n52.37367, 4.87394\n52.37998, 4.86959\n52.36369, 4.83861\n52.36181, 4.88783\n52.35099, 4.886627\n52.37811, 4.89196\n52.35166, 4.83893\n52.38355, 4.90951\n52.36926, 4.86997\n52.38793182373040, 4.884929180145260\n52.3543, 4.88103\n52.35974, 4.94089\n52.36377, 4.91788\n52.38912, 4.87907\n52.36227, 4.92893\n52.36051, 4.86451\n52.34746, 4.87559\n52.36324, 4.8679\n52.36064, 4.97643\n52.37228, 4.89668\n52.35764, 4.9067\n52.37839, 4.84853\n52.36218, 4.89768\n52.36688, 4.87684\n52.35696, 4.92971\n52.35622, 4.79544\n52.36474, 4.90273\n52.36603, 4.86833\n52.37309, 4.90845\n52.35381317138670, 4.941221237182610\n52.35174, 4.89701\n52.37871, 4.84688\n52.39054, 4.88886\n52.3537, 4.88632\n52.31774, 4.94647\n52.38231, 4.84866\n52.34592, 4.8587\n52.34227, 4.91217\n52.36042, 4.86161\n52.36251, 4.88962\n52.35823, 4.92035\n52.35043, 4.90079\n52.3589, 4.91307\n52.35372, 4.85028\n52.36501, 4.87918\n52.38827, 4.94617\n52.36268, 4.87346\n52.3639, 4.93817\n52.367088, 4.863511\n52.37006, 4.85853\n52.35936, 4.86001\n52.3455, 4.84902\n52.355133096636700, 4.879653035660960\n52.36646, 4.88235\n52.39238, 4.92899\n52.35263, 4.89093\n52.383, 4.89161\n52.35749, 4.87699\n52.36689, 4.91809\n52.36062, 4.86901\n52.37537, 4.86019\n52.42397, 4.88864\n52.35531, 4.89116\n52.35433, 4.89863\n52.36518, 4.86652\n52.37108, 4.87389\n52.37639, 4.87637\n52.34861, 5.00784\n52.35938, 4.93618\n52.39319, 4.9435\n52.35521, 4.8871\n52.35719, 4.92193\n52.35719, 4.92193\n52.37141, 4.90353\n52.36495, 4.87367\n52.3809, 4.96522\n52.36055, 4.8532\n52.38295, 4.9152\n52.36104, 4.85778\n52.39508, 4.99186\n52.37704, 4.84606\n52.36101, 4.89042\n52.38069, 4.86826\n52.37154, 4.852\n52.35781, 4.90529\n52.38919, 4.88846\n52.36541, 4.92481\n52.34255, 4.80578\n52.38277, 4.80351\n52.38598, 4.89164\n52.36239, 4.86202\n52.36381, 4.93857\n52.37591, 4.8479\n52.35229, 4.89105\n52.37563, 4.85014\n52.37938, 4.89036\n52.37993, 4.8683\n52.34903, 4.89508\n52.36271, 4.84466\n52.36876, 4.86759\n52.3603, 4.86692\n52.361286, 4.893265\n52.38459, 4.88058\n52.3744, 4.85936\n52.37638, 4.88217\n52.37081, 4.88379\n52.38399, 4.83583\n52.37862, 4.89181\n52.3481, 4.85904\n52.35821, 4.88871\n52.34813, 4.84794\n52.34336, 4.9227\n52.3798, 4.88726\n52.3825, 4.85645\n52.3552, 4.89161\n52.37886, 4.88723\n52.37633, 4.89259\n52.36333, 4.93846\n52.34933, 4.91314\n52.34292, 4.89445\n52.34736, 4.87546\n52.36079, 4.88298\n52.37074, 4.95286\n52.36063, 4.89241\n52.35217, 4.895\n52.36307, 4.89709\n52.35811, 4.85707\n52.36645, 4.85563\n52.3798, 4.89058\n52.40793, 4.90264\n52.35428, 4.90005\n52.33917, 4.89633\n52.36262, 4.86174\n52.35317, 4.93806\n52.36573, 4.88159\n52.35345, 4.89037\n52.38772, 4.93933\n52.37318, 4.88886\n52.37381, 4.85761\n52.37346, 4.83449\n52.3643, 4.88867\n52.37272, 4.84985\n52.38278, 4.85254\n52.35817, 4.91958\n52.37087, 4.91014\n52.384147, 4.8491909\n52.39051, 4.87076\n52.35896, 4.81951\n52.38778, 4.88848\n52.36416, 4.89859\n52.34825, 4.93682\n52.36679, 4.86016\n52.36709, 4.79332\n52.389222988225400, 4.880430025141170\n52.40294, 4.90568\n52.36192, 4.88681\n52.3692, 4.92534\n52.36406, 4.93973\n52.37595, 4.87697\n52.37381, 4.87296\n52.36608, 4.86301\n52.35664, 4.8899\n52.37291, 4.88124\n52.35896, 4.81951\n52.38324, 4.85573\n52.35977, 4.90936\n52.36095, 4.92986\n52.35582, 4.89172\n52.35896, 4.81951\n52.37104, 4.88724\n52.36373, 4.93306\n52.36991, 4.88717\n52.36676, 4.86285\n52.35593, 4.89208\n52.3567, 4.88983\n52.36807, 4.93449\n52.4069, 4.90168\n52.34383, 4.89273\n52.38393, 4.84977\n52.37923, 4.88388\n52.36407, 4.94169\n52.365177154541000, 4.869557857513420\n52.37484, 4.86096\n52.35818, 4.91959\n52.38745, 4.91972\n52.37567, 4.85533\n52.351593625824200, 4.850583408148310\n52.35254, 4.88886\n52.36137, 4.8665\n52.35808, 4.89101\n52.37125, 4.90529\n52.34271, 4.92485\n52.35042, 4.8922\n52.34976, 4.84908\n52.39668, 4.95533\n52.37292, 4.87225\n52.35327, 4.84733\n52.3522, 4.91484\n52.35151, 4.88881\n52.36136, 4.92817\n52.35155, 4.89179\n52.351939033858400, 4.9048166695891400\n52.40325, 4.91954\n52.37957, 4.86845\n52.39145, 4.929\n52.39188, 4.9264\n52.36581, 4.87951\n52.35289, 4.87731\n52.41278, 4.91917\n52.37429, 4.86268\n52.37847, 4.88475\n52.35469, 4.85663\n52.35198, 4.90531\n52.35639, 4.91596\n52.39333, 4.91358\n52.37156, 4.9438\n52.35489, 4.89739\n52.3663, 4.87769\n52.36452, 4.90949\n52.39463, 4.93347\n52.38428, 4.88636\n52.38351, 4.88368\n52.36693, 4.88522\n52.35646, 4.83178\n52.36779, 4.92649\n52.38255, 4.87069\n52.37853409690300, 4.890076680583560\n52.35092, 4.84941\n52.380775, 4.888254\n52.3807, 4.86743\n52.35113, 4.93215\n52.37369, 4.90379\n52.37914, 4.88491\n52.3823, 4.88576\n52.37236, 4.89688\n52.37674, 4.89224\n52.3724, 4.8717\n52.35425, 4.88651\n52.34861, 4.89643\n52.34965, 4.89403\n52.34037, 4.90324\n52.37515, 4.94627\n52.35231, 4.89094\n52.38414, 4.85433\n52.36254, 4.8928\n52.34634, 4.87715\n52.3695, 4.83711\n52.34201, 4.895274\n52.37617, 4.87724\n52.37867, 4.88561\n52.34289, 4.91049\n52.35296, 4.88243\n52.35242462158200, 4.879333019256590\n52.36807, 4.87636\n52.38308, 4.88416\n52.31182, 5.00063\n52.35216, 4.92835\n52.31217, 4.99983\n52.36955261230460, 4.881127834320060\n52.3102, 5.00055\n52.31226, 4.99838\n52.37673, 4.84669\n52.38517, 4.9561\n52.3634, 4.85335\n52.37935, 4.85477\n52.36861, 4.8553\n52.35612, 4.88026\n52.39519, 4.91041\n52.36409, 4.84923\n52.39567, 5.1952\n52.37911, 4.89349\n52.36514, 4.85357\n52.36309, 4.84393\n52.37514, 4.88916\n52.36173, 4.8454\n52.36124, 4.89053\n52.34272, 4.9135\n52.36402, 4.93394\n52.40613, 4.92436\n52.363968, 4.885711\n52.35748, 4.85038\n52.35035, 4.91362\n52.39508, 4.99186\n52.36376, 4.92128\n52.36491, 4.86102\n52.40613, 4.92995\n52.36714, 4.86019\n52.37292, 4.8203\n52.36307, 4.94322\n52.37067, 4.90373\n52.35326, 4.90668\n52.36492, 4.85908\n52.32613, 4.97748\n52.37486, 4.87437\n52.36091, 4.97497\n52.39984, 4.92056\n52.36623, 4.85891\n52.36689, 4.85891\n52.36568, 4.85883\n52.36519, 4.86058\n52.36556, 4.85867\n52.35507, 4.9114\n52.37124, 4.87155\n52.36404, 4.91228\n52.35792, 4.92197\n52.37749, 4.97868\n52.35812, 4.91396\n52.3705, 4.86328\n52.38537, 4.91155\n52.37361, 4.95112\n52.37234, 4.8673\n52.3441, 4.867\n52.36179, 4.92923\n52.37598, 4.8931\n52.3890156, 4.8800626\n52.364777, 4.908362\n52.35227, 5.00066\n52.3765, 4.88313\n52.39246, 4.93268\n52.36737, 4.86018\n52.36101, 4.82224\n52.36998, 4.87264\n52.36422, 4.8755\n52.37923, 4.88309\n52.41016, 4.96369\n52.35614, 4.89805\n52.36029, 4.90464\n52.35746, 4.92205\n52.369416, 4.8575709\n52.36182, 4.90581\n52.36302, 4.90532\n52.37746, 4.83598\n52.35862, 4.88608\n52.35678, 4.9056\n52.37113, 4.91338\n52.3661, 4.94138\n52.35969, 4.79162\n52.36306, 4.93611\n52.35108, 4.85356\n52.37664, 4.87934\n52.38169, 4.88362\n52.3867, 4.91677\n52.35127, 4.89384\n52.35931396484370, 4.93344783782959\n52.38777, 4.94446\n52.35685, 4.87343\n52.35381, 4.89045\n52.40154, 4.95282\n52.3757, 4.85931\n52.36145, 4.88552\n52.36901, 4.86852\n52.36641, 4.87983\n52.36203, 4.85018\n52.34718, 4.88952\n52.35206, 4.89746\n52.35629, 4.94228\n52.36564, 4.83651\n52.36099, 4.85987\n52.34759, 4.86044\n52.35542, 4.9981\n52.36347, 4.87314\n52.35472, 4.83962\n52.36682, 4.87356\n52.36604, 4.86711\n52.37995, 4.88577\n52.35677, 4.91537\n52.33429, 4.90253\n52.39097, 4.8777\n52.35518, 4.881\n52.38573, 4.8663\n52.35294, 4.91728\n52.37544, 4.87964\n52.36259, 4.86327\n52.36908, 4.90657\n52.37479, 4.87261\n52.38329, 4.87189\n52.34477170582480, 4.898175052330650\n52.37477, 4.864\n52.38733, 4.91906\n52.35138, 4.85136\n52.37296, 4.85875\n52.35172, 4.90688\n52.36829, 4.92378\n52.39729, 4.91497\n52.34176, 4.89855\n52.382662736337500, 4.91528946698054\n52.41704, 4.8996\n52.37075, 4.87471\n52.37497, 4.85833\n52.36342, 4.88956\n52.37131, 4.87306\n52.35334, 4.88987\n52.38371, 4.89072\n52.3671, 4.8902\n52.3703, 4.87079\n52.376488, 4.876391\n52.38234, 4.8794\n52.35191, 4.92078\n52.3532, 4.88882\n52.35601, 4.90013\n52.38526, 4.91799\n52.35772, 4.90668\n52.36112, 4.86083\n52.36253, 4.93751\n52.36321, 4.98414\n52.3863, 4.92014\n52.38789, 4.88825\n52.36454, 4.87213\n52.35554, 4.90439\n52.37577, 4.87255\n52.37171, 4.93199\n52.36364, 4.86081\n52.39578, 4.90585\n52.36349, 4.89322\n52.37943, 4.89126\n52.35926, 4.92586\n52.37047576904290, 4.9409708976745600\n52.3773, 4.89475\n52.37838, 4.86084\n52.3641, 4.88634\n52.35242, 4.92652\n52.34998, 4.89492\n52.36239, 4.89859\n52.3506, 4.78834\n52.37041, 4.90235\n52.37043, 4.87123\n52.35098, 4.8861\n52.3778, 4.88626\n52.37808, 4.89456\n52.34361, 4.89763\n52.35099, 4.88663\n52.38767, 4.88464\n52.35369, 4.86822\n52.36989, 4.88679\n52.36108, 4.90585\n52.35396, 4.93526\n52.34935, 4.91202\n52.37313, 4.89652\n52.35832, 4.92368\n52.38182, 4.84981\n52.36357, 4.83057\n52.34972, 4.86443\n52.37254, 4.90194\n52.36744, 4.86625\n52.36957, 4.88305\n52.35302, 4.87571\n52.36732, 4.86448\n52.39293, 4.93417\n52.34315, 4.86275\n52.34104, 4.9039\n52.39038, 4.88716\n52.360755906500900, 4.844416118844120\n52.36992, 4.90279\n52.37232, 4.901\n52.35958, 4.92714\n52.35571, 4.89438\n52.3676, 4.92472\n52.41119, 4.8931\n52.37579, 4.93414\n52.35359, 4.86115\n52.40679, 4.91361\n52.37699, 4.87754\n52.35735, 4.91796\n52.3624, 4.8935\n52.35496, 4.91249\n52.35637, 4.91604\n52.37353, 4.85739\n52.36757, 4.87609\n52.37135, 4.8958\n52.35471, 4.85546\n52.35375, 4.84745\n52.35398, 4.90484\n52.37087, 4.8551\n52.35296, 4.91147\n52.39933, 4.89834\n52.35382, 4.82938\n52.36487, 4.93429\n52.34097, 4.9036\n52.36693, 4.8656\n52.37294, 4.95167\n52.36988, 4.86253\n52.31419, 4.9941\n52.35858, 4.92583\n52.36394982176550, 4.9283417698833000\n52.36441, 4.88599\n52.36765, 4.85352\n52.35589, 4.87728\n52.34446, 4.95261\n52.36364, 4.8634\n52.34831, 4.84706\n52.37664, 4.8521\n52.36906, 4.88025\n52.35706, 4.89405\n52.35289, 4.90646\n52.34808, 4.85065\n52.36933, 4.89821\n52.392, 4.88118\n52.35391, 4.90603\n52.35207, 4.83136\n52.36425, 4.89931\n52.35872, 4.90728\n52.36792, 4.87486\n52.36715, 4.87546\n52.37338, 4.86333\n52.34953, 4.9108\n52.39911, 4.95546\n52.36986, 4.92258\n52.35226, 4.89835\n52.36037, 4.862\n52.37597, 4.8843\n52.38825, 4.87881\n52.36792, 4.89041\n52.36544, 4.93467\n52.364323, 4.899321\n52.36508, 4.92442\n52.351, 4.85453\n52.37065, 4.94039\n52.36678, 4.87437\n52.36925, 4.91119\n52.36295, 4.90481\n52.35226782292880, 4.885263006116830\n52.36283, 4.93395\n52.36121, 4.85911\n52.37431, 4.83939\n52.3535, 4.88715\n52.40582899286270, 4.902301281785130\n52.36379, 4.93354\n52.34984, 4.89251\n52.36557, 4.92681\n52.38116, 4.88845\n52.37817, 4.8474\n52.36825, 4.93031\n52.34838, 4.78878\n52.35717, 4.92196\n52.36993, 4.86596\n52.37991, 4.85227\n52.35568, 4.88501\n52.36326, 4.90345\n52.36503, 4.94412\n52.39245, 4.87921\n52.35541, 4.892\n52.38161, 4.91112\n52.36196, 4.91747\n52.38777, 4.8783\n52.39894, 4.92041\n52.35503, 4.90349\n52.3523, 4.84698\n52.38708, 4.9555\n52.37647621924230, 4.890558641338100\n52.37766430746850, 4.890351741868750\n52.34736, 4.78846\n52.38442, 4.8766\n52.37165, 4.84912\n52.36117, 4.86627\n52.37422, 4.88225\n52.35278, 4.90115\n52.37991, 4.85708\n52.3687, 4.88595\n52.38952, 4.88661\n52.35033, 4.83116\n52.3775, 4.94526\n52.37559, 4.87478\n52.38402, 4.88491\n52.36314, 4.94483\n52.36806, 4.86341\n52.36526, 4.86696\n52.35695, 4.91912\n52.39305, 4.94441\n52.404804, 4.903021\n52.37462, 4.86073\n52.3743, 4.87542\n52.35423, 4.90824\n52.37088, 4.90351\n52.350619855589000, 4.935150497306380\n52.42185, 4.90293\n52.3483645, 4.9015092\n52.34638, 4.89087\n52.37889, 4.93095\n52.3458, 4.8909\n52.34451, 4.86411\n52.35111, 4.90609\n52.38141, 4.88037\n52.36976, 4.88065\n52.35342, 4.92521\n52.29122, 4.97366\n52.39015, 4.88145\n52.38055, 4.87595\n52.3529052734375, 4.886025905609130\n52.35289, 4.99362\n52.38085, 4.87372\n52.37377, 4.88827\n52.35123, 5.00032\n52.37084, 4.91389\n52.34159, 4.90861\n52.34703, 4.87727\n52.3695, 4.86229\n52.37628, 4.87766\n52.34965, 5.00809\n52.36793, 4.90726\n52.37414, 4.88209\n52.37314, 4.85994\n52.35324, 4.93751\n52.40405, 4.94165\n52.37323, 4.92166\n52.36972, 4.89351\n52.38405, 4.90738\n52.38231, 4.87233\n52.34961, 4.85097\n52.37807, 4.88392\n52.35634, 4.99094\n52.35663, 4.98739\n52.34255, 4.90114\n52.3698, 4.91396\n52.36224, 4.90237\n52.38069, 4.88447\n52.34818, 4.90968\n52.35393, 4.99436\n52.35544, 4.90446\n52.37386, 4.88225\n52.35471, 4.86983\n52.37164, 4.92134\n52.36317, 4.98578\n52.36715, 4.87044\n52.39091, 4.8772\n52.36842, 4.89425\n52.37906, 4.87108\n52.37489, 4.90546\n52.38327, 4.91446\n52.33922, 4.91788\n52.39049, 4.8829\n52.37496, 4.87835\n52.35287, 4.88533\n52.34559, 4.79503\n52.35656, 4.91836\n52.35876, 4.85966\n52.36295, 4.86176\n52.35432, 4.90506\n52.36319, 4.87663\n52.36827, 4.85025\n52.35989, 4.89584\n52.350634, 4.89349\n52.35112, 4.91234\n52.36794, 4.87251\n52.36788, 4.91004\n52.34577, 4.87658\n52.35123, 4.86009\n52.37613, 4.88322\n52.35458, 4.88642\n52.34821, 4.90406\n52.36992, 4.85093\n52.37938, 4.81556\n52.36852, 4.87796\n52.35539, 4.92071\n52.3784, 4.85215\n52.35586, 4.89303\n52.3822, 4.87139\n52.37173, 4.87109\n52.35307, 4.88131\n52.36845, 4.87291\n52.36527, 4.94275\n52.38991, 4.87708\n52.3495, 4.93602\n52.30041, 4.99619\n52.38104, 4.88799\n52.38566, 4.88378\n52.34269, 4.87192\n52.34269, 4.87191\n52.36044, 4.84953\n52.36423, 4.86834\n52.35048, 4.89547\n52.37709, 4.87519\n52.39314, 4.92327\n52.37047, 4.87464\n52.37404880562900, 4.871801290904090\n52.38753, 4.88432\n52.35184, 4.94276\n52.37695, 4.83677\n52.36396, 4.90648\n52.361601630678400, 4.852632215869140\n52.36128, 4.85765\n52.38625, 4.89104\n52.36542, 4.87309\n52.39117, 4.92581\n52.38709, 4.94486\n52.3682, 4.86603\n52.32641, 4.87348\n52.35987, 4.90623\n52.34075, 4.94755\n52.38035, 4.85353\n52.37372, 4.87909\n52.35254, 4.89458\n52.38563, 4.91785\n52.41833, 4.90519\n52.37728, 4.94564\n52.4087, 4.90498\n52.38823, 4.95921\n52.356, 4.88861\n52.35025, 4.89325\n52.33837, 4.8464\n52.34482, 4.87221\n52.4147, 5.02643\n52.360474, 4.892034\n52.37586, 4.87896\n52.36186, 4.89185\n52.36763, 4.93126\n52.3819, 4.88021\n52.35918, 4.92387\n52.36611, 4.85958\n52.36923, 4.86838\n52.36877, 4.93114\n52.3754, 4.86312\n52.36916, 4.91157\n52.38651, 4.91652\n52.35742, 4.92743\n52.35382, 4.94032\n52.36388, 4.92078\n52.38222, 4.88383\n52.38113, 4.89171\n52.41811, 4.90178\n52.37595, 4.87907\n52.36324, 4.89884\n52.35779, 4.92097\n52.35744, 4.93739\n52.36842, 4.92438\n52.37464, 4.8782\n52.38577, 4.87007\n52.35103, 4.91269\n52.30023, 4.99987\n52.3839, 4.89202\n52.38411, 4.8846\n52.34736, 4.85646\n52.3606, 4.85591\n52.34973, 4.87652\n52.36222, 4.90081\n52.36894, 4.88657\n52.38211, 4.87291\n52.33158, 4.88613\n52.35905, 4.8571\n52.391510009765600, 4.924835205078120\n52.36167, 4.85231\n52.36495, 4.87867\n52.37093, 4.8563\n52.37792, 4.85611\n52.36846, 4.87389\n52.36155574320490, 4.864930205714720\n52.35053, 4.85961\n52.39976, 4.90331\n52.37298, 4.85418\n52.35103, 4.89218\n52.37046, 4.91136\n52.35556, 4.91198\n52.38949, 4.88658\n52.39483, 4.91477\n52.36846, 4.86632\n52.36095, 4.85945\n52.38971, 4.88485\n52.36545, 4.92532\n52.3794, 4.96613\n52.35394, 4.92027\n52.37167, 4.85471\n52.3645, 4.86181\n52.35736, 4.90468\n52.37089, 4.87258\n52.35128, 4.88991\n52.37384, 4.88185\n52.36858263099550, 4.867731188287000\n52.35032, 4.88748\n52.3563, 4.88911\n52.404045, 4.901576\n52.37061, 4.88088\n52.3986, 4.92161\n52.36174, 4.88709\n52.3642, 4.86495\n52.35158, 4.91161\n52.40481, 4.9004\n52.37213, 4.8495\n52.41371, 4.88129\n52.3551471, 4.8875046\n52.42512, 4.88842\n52.37007, 4.84877\n52.40744, 4.99579\n52.36847, 4.92456\n52.38728, 4.88526\n52.35481, 4.90078\n52.359819546116300, 4.851881918580780\n52.36282, 4.86005\n52.36382, 4.94345\n52.36482, 4.87474\n52.37712, 4.91568\n52.36697, 4.899149\n52.36881, 4.91573\n52.39007, 4.91341\n52.38206, 4.85036\n52.35668, 4.89999\n52.35456, 4.88983\n52.35288, 4.88831\n52.38196, 4.87121\n52.37056, 4.86855\n52.36495, 4.85858\n52.36832, 4.93039\n52.36073, 4.85525\n52.36398, 4.93364\n52.37058, 4.86728\n52.35913, 4.85134\n52.38511, 4.87844\n52.37578, 4.86749\n52.38269, 4.87232\n52.37543, 4.84768\n52.33911, 4.91857\n52.34743, 4.89243\n52.36412, 4.98524\n52.36415, 4.98588\n52.38315, 4.84077\n52.38735, 4.91605\n52.37047, 4.85409\n52.36687, 4.85992\n52.38718, 4.88883\n52.37128, 4.86193\n52.3633, 4.91135\n52.37239, 4.87172\n52.35251, 4.79768\n52.36199, 4.85525\n52.37516, 4.89424\n52.35955, 4.82713\n52.35434, 4.91858\n52.35697, 4.90516\n52.35661, 4.8567\n52.35341, 4.84842\n52.37641328502710, 4.845573493002160\n52.364791915810300, 4.934079193559830\n52.36398, 4.85847\n52.37703, 4.88484\n52.37445, 4.86167\n52.385, 4.87677\n52.35197, 4.84708\n52.36198, 4.84407\n52.35672, 4.93406\n52.35644, 4.91563\n52.36252, 4.90424\n52.36611, 4.87783\n52.35475, 4.89229\n52.341639503201200, 4.893784882369180\n52.36452, 4.86007\n52.38024, 4.86973\n52.37778, 4.86073\n52.351913, 4.904634\n52.40441, 4.94333\n52.34883, 4.8884\n52.37072, 4.85291\n52.36834, 4.87735\n52.37676, 4.83955\n52.35238, 4.89341\n52.35436, 4.88316\n52.35997, 4.91497\n52.34723, 4.86015\n52.35758, 4.89656\n52.36097, 4.89445\n52.38363, 4.87115\n52.36695, 4.92844\n52.37739, 4.88048\n52.38617, 4.88539\n52.36314, 4.89264\n52.38738, 4.88049\n52.37128, 4.84862\n52.38232, 4.87028\n52.38013, 4.8802\n52.38444, 4.88198\n52.35869, 4.94166\n52.36323, 4.89223\n52.37632, 4.89396\n52.35654, 4.89015\n52.36047, 4.90124\n52.36375, 4.86606\n52.34281, 4.86046\n52.3567, 4.89895\n52.42213, 4.89241\n52.39521, 4.91066\n52.36004, 4.85431\n52.36213, 4.89372\n52.36444, 4.93357\n52.37107, 4.8719\n52.37274, 4.88085\n52.35231, 4.89742\n52.37532, 4.94194\n52.35539047240770, 4.909228271114200\n52.3473121, 4.8431473\n52.34761, 4.89937\n52.3472, 4.85836\n52.34408, 4.91061\n52.37443, 4.85949\n52.35221, 4.90685\n52.35624, 4.8524\n52.37218, 4.90604\n52.39655, 4.90783\n52.36456, 4.87494\n52.35215, 4.91222\n52.35918, 4.92166\n52.37568, 4.89425\n52.371606121146900, 4.848807013530720\n52.3618, 4.94421\n52.36184, 4.90585\n52.34182, 4.90491\n52.35578, 4.89791\n52.38657, 4.84589\n52.38385, 4.87759\n52.3634, 4.97832\n52.37879, 4.87581\n52.36865, 4.87174\n52.35443, 4.91673\n52.37643, 4.85673\n52.37254, 4.90382\n52.35143280029290, 4.911622047424310\n52.37559, 4.90682\n52.37614, 4.84966\n52.37445, 4.90541\n52.38726, 4.93774\n52.3511, 4.94085\n52.37249, 4.87565\n52.37291231832450, 4.895049925776650\n52.35333, 4.92403\n52.36431, 4.89932\n52.36455, 4.87712\n52.35118, 5.002233299999990\n52.36417, 4.85599\n52.3486, 4.94272\n52.37786, 4.8863\n52.36779, 4.87177\n52.35471, 4.88151\n52.39134, 4.87707\n52.34139, 4.92011\n52.35065, 4.8878\n52.35731, 4.91282\n52.35278, 4.91919\n52.35059, 4.84711\n52.36425, 4.90359\n52.37362, 4.86557\n52.396805, 4.915318\n52.35954, 4.86128\n52.35727, 4.87465\n52.37864, 4.87505\n52.3565573, 4.9175314\n52.35222, 4.86182\n52.35117, 4.89543\n52.36417, 4.93963\n52.34847, 4.87634\n52.37239, 4.87172\n52.36641, 4.85251\n52.35854, 4.93566\n52.3654, 4.84906\n52.38624888310360, 4.888062407463270\n52.35165, 4.91358\n52.34948, 4.89065\n52.37085, 4.84896\n52.37002, 4.87767\n52.36366, 4.86006\n52.378207718490500, 4.892641452375600\n52.34375, 4.85807\n52.35068, 4.8894\n52.38571, 4.8833\n52.35131, 4.91388\n52.36964, 4.84843\n52.35927, 4.92427\n52.3721, 4.95047\n52.3561, 4.8705\n52.36757, 4.86833\n52.36539, 4.98648\n52.3502, 4.88583\n52.34159, 4.92606\n52.37825, 4.84685\n52.37817, 4.87073\n52.37543, 4.87196\n52.37882, 4.89387\n52.36342, 4.90279\n52.36188, 4.90062\n52.36625, 4.87423\n52.37778, 4.88709\n52.37644, 4.89925\n52.34865, 5.01056\n52.36506, 4.90209\n52.41333, 4.88338\n52.35312, 4.88813\n52.358173, 4.913978\n52.34274, 4.79123\n52.36919, 4.89745\n52.34131, 4.84542\n52.38443, 4.87415\n52.39661, 4.91648\n52.37948, 4.88791\n52.37936, 4.87703\n52.37764, 4.9441\n52.3689, 4.85963\n52.3558, 4.89727\n52.36923, 4.86632\n52.33878, 4.84729\n52.37971, 4.89274\n52.36051, 4.89089\n52.36702, 4.85805\n52.34594, 4.86081\n52.36652, 4.88573\n52.37796, 4.89173\n52.36397, 4.86027\n52.37085, 4.88212\n52.36257, 4.85993\n52.35617, 4.89302\n52.36288, 4.85843\n52.35767, 4.91409\n52.37189, 4.85803\n52.34334, 4.84603\n52.34236, 4.8781\n52.35503, 4.99792\n52.34293, 4.84649\n52.34255, 4.84597\n52.35342, 4.89186\n52.3648, 4.93265\n52.36363, 4.91548\n52.35421, 4.9434\n52.36223, 4.90543\n52.3741, 4.87786\n52.35773, 4.90737\n52.34411, 4.86253\n52.37344, 4.84671\n52.35436, 4.89204\n52.35852, 4.93452\n52.3684, 4.94415\n52.36964, 4.86856\n52.34292, 4.84409\n52.36431906147310, 4.855427067747950\n52.3606, 4.86161\n52.37667, 4.86151\n52.37418, 4.89823\n52.37579, 4.84443\n52.37908, 4.88982\n52.37613, 4.89479\n52.36193, 4.86698\n52.37046, 4.91945\n52.35201, 4.85392\n52.37625, 4.83782\n52.37139, 4.86015\n52.36603, 4.89189\n52.34914, 4.8485\n52.42236, 4.89511\n52.35686, 4.90829\n52.38653, 4.91534\n52.36705, 4.87881\n52.36269, 4.94053\n52.366601090016300, 4.9342371542652200\n52.3499, 4.85738\n52.38725, 4.92041\n52.37831, 4.88733\n52.35335, 4.91934\n52.38012, 4.88689\n52.37427, 4.90485\n52.35752, 4.93545\n52.35532, 4.89156\n52.37675, 4.88453\n52.357433, 4.857956\n52.3763, 4.86156\n52.36975, 4.92527\n52.39971, 4.91792\n52.31924631223670, 4.954018244533610\n52.38168, 4.88413\n52.35196, 4.91291\n52.39528, 4.91893\n52.40745, 4.90396\n52.39013, 4.88671\n52.34346, 4.89507\n52.35715, 4.85241\n52.37247, 4.90561\n52.37154, 4.85939\n52.35628, 4.99844\n52.35446, 4.85551\n52.37102, 4.87885\n52.3532, 4.87888\n52.36947, 4.88491\n52.35764, 4.87692\n52.38272, 4.8731\n52.37572, 4.87891\n52.36349105834960, 4.883462905883780\n52.36349105834960, 4.883462905883780\n52.34167, 4.89479\n52.357433, 4.857956\n52.35924, 4.89433\n52.36613, 4.86611\n52.38003, 4.84789\n52.35597, 4.88887\n52.367270360156100, 4.863555187875800\n52.36385, 4.88564\n52.36685, 4.91097\n52.3774, 4.84858\n52.37718, 4.85593\n52.38567, 4.89019\n52.37464, 4.87285\n52.37397, 4.87324\n52.34449, 4.89515\n52.34392, 4.89207\n52.34199, 4.92514\n52.354, 4.99103\n52.38399, 4.89329\n52.38181, 4.87683\n52.35645, 4.89079\n52.36332, 4.90236\n52.40911, 4.89318\n52.35345, 4.91127\n52.3625, 4.92492\n52.36547, 4.90232\n52.37617, 4.87846\n52.35148, 4.90816\n52.34335, 4.89481\n52.36385, 4.87696\n52.37151, 4.88165\n52.37844, 4.87629\n52.35987, 4.88808\n52.37947, 4.82375\n52.35092, 5.00225\n52.36321, 4.91804\n52.36587, 4.86824\n52.36598, 4.8611\n52.35808, 4.88892\n52.35367, 4.87141\n52.36632, 4.86749\n52.35437, 4.88829\n52.36153, 4.87552\n52.37118, 4.87697\n52.37603, 4.85119\n52.36293, 4.85629\n52.36429, 4.85056\n52.36655, 4.89039\n52.36655, 4.89039\n52.34435, 4.90805\n52.38508, 4.90925\n52.35458, 4.9039\n52.37617, 4.89228\n52.35105, 4.91299\n52.3821, 4.88626\n52.37915, 4.85889\n52.34558, 4.86048\n52.36434, 4.93607\n52.38161, 4.88375\n52.35388, 4.89877\n52.36448, 4.85166\n52.34993, 4.87882\n52.37592, 4.88042\n52.35518, 4.881\n52.34476, 4.89201\n52.38018, 4.87985\n52.38224, 4.86862\n52.34042, 4.92106\n52.36214, 4.93602\n52.33947, 4.9185\n52.347, 4.85955\n52.35112, 4.94285\n52.37238, 4.85266\n52.35166, 4.85767\n52.4237, 4.89228\n52.36695, 4.86726\n52.38073, 4.86817\n52.37376, 4.92702\n52.35004, 4.85956\n52.36199, 4.92669\n52.36814, 4.86832\n52.35165, 4.84904\n52.38735, 4.88993\n52.34298, 4.90093\n52.34403, 4.89232\n52.37599, 4.86413\n52.405695006041700, 4.932807668192210\n52.36513, 4.85561\n52.38016, 4.88577\n52.35547, 4.91729\n52.35331, 4.92009\n52.35459, 4.88953\n52.34227, 4.89535\n52.39987, 4.90603\n52.38835, 4.8876\n52.36895864197670, 4.861723110079760\n52.34939135623240, 4.845193322753890\n52.38407, 4.84093\n52.36362, 4.87453\n52.35663, 4.91654\n52.38107, 4.88629\n52.35819, 4.89453\n52.36504, 4.90637\n52.366348270691700, 4.8787023577394100\n52.35418, 4.89798\n52.36544, 4.92655\n52.35339, 4.84904\n52.30824, 4.98137\n52.35537, 4.9362\n52.36357, 4.87979\n52.36665, 4.88049\n52.36727, 4.88024\n52.367, 4.8792\n52.36564, 4.87855\n52.38416, 4.87143\n52.41826, 4.90073\n52.34952, 4.86403\n52.36989, 4.84952\n52.4006, 4.91977\n52.36272, 4.90861\n52.39205, 4.94383\n52.34991, 4.94026\n52.36465, 4.91104\n52.35442, 4.93148\n52.37053, 4.86195\n52.34219, 4.91696\n52.38124, 4.88842\n52.35481, 4.88744\n52.36116, 4.87542\n52.3616, 4.86119\n52.37094, 4.86425\n52.36077, 4.85359\n52.41339, 4.89372\n52.35138, 4.8568\n52.38254, 4.88335\n52.37693, 4.85679\n52.36431, 4.93571\n52.36348, 4.85591\n52.3652, 4.93744\n52.3587, 4.8601\n52.37824, 4.88181\n52.36306, 4.9083\n52.37916, 4.83898\n52.34262, 4.90868\n52.37732, 4.86135\n52.37422, 4.9211\n52.37824, 4.87087\n52.37027, 4.85532\n52.377174377441400, 4.94814395904541\n52.40662, 4.92246\n52.38741, 4.88208\n52.4069, 4.93517\n52.37103, 4.89583\n52.37788, 4.8029\n52.34389, 4.86687\n52.36932, 4.882543\n52.36245, 4.904\n52.37252, 4.85834\n52.34654, 4.86533\n52.39487, 4.93111\n52.35678, 4.92396\n52.35015, 4.9135\n52.35079, 4.85205\n52.37304, 4.89355\n52.3918, 4.87313\n52.35323, 4.93898\n52.38531855741370, 4.881878970765520\n52.3652, 4.9413\n52.36828, 4.92478\n52.35422, 4.84966\n52.37238, 4.87376\n52.34299, 4.95102\n52.38219, 4.88044\n52.35631, 4.93949\n52.37288, 4.90648\n52.36861, 4.88607\n52.32001, 4.96323\n52.36904, 4.85818\n52.37946, 4.85634\n52.36534844050950, 4.910741453431980\n52.29034, 4.98011\n52.34809, 4.84857\n52.37325, 4.85107\n52.37017, 4.94396\n52.3985, 4.91342\n52.35837, 4.85969\n52.39825, 4.90592\n52.38404846191400, 4.873538970947260\n52.40716, 4.90064\n52.38531, 4.95352\n52.3789, 4.87492\n52.38371, 4.8743\n52.37178, 4.88017\n52.3779, 4.86199\n52.37178, 4.85301\n52.36278, 4.8528\n52.35336, 4.99456\n52.38261, 4.87531\n52.35643, 4.88806\n52.39023, 4.92482\n52.36157, 4.97639\n52.34789, 4.89176\n52.35164, 4.9113\n52.38621, 4.91678\n52.37468, 4.94674\n52.36083, 4.91469\n52.33867, 4.92121\n52.36054, 4.86428\n52.36384, 4.88328\n52.40632, 4.9304\n52.35544, 4.90776\n52.36236, 4.85382\n52.3528, 4.88847\n52.37154, 4.87665\n52.36241, 4.93785\n52.34119, 4.89622\n52.36843, 4.87981\n52.343441009521400, 4.905183792114250\n52.32956, 4.85825\n52.36229, 4.90017\n52.3838, 4.83647\n52.36174, 4.93661\n52.35557, 4.9016\n52.36747, 4.85643\n52.34457, 4.90245\n52.365, 4.85835\n52.37981, 4.87418\n52.34557, 4.8624\n52.33872, 4.79454\n52.36021, 4.86372\n52.37633, 4.85055\n52.35698, 4.93415\n52.36574, 4.83052\n52.36633, 4.88552\n52.38281, 4.87503\n52.3447, 4.87048\n52.37948, 4.87532\n52.38298, 4.87758\n52.35893, 4.89561\n52.37265, 4.85066\n52.36131, 4.79003\n52.37222, 4.87419\n52.35893, 4.92372\n52.3508, 4.84169\n52.35732, 4.9197\n52.39301, 4.87294\n52.38106, 4.88669\n52.36622, 4.86612\n52.3837, 4.87297\n52.34906, 4.87094\n52.36907, 4.94288\n52.36111, 4.93493\n52.38727, 4.95789\n52.3852, 4.85133\n52.36012, 4.90536\n52.3678, 4.94205\n52.36877, 4.85404\n52.38695, 4.8856\n52.37113, 4.86086\n52.37906, 4.86187\n52.37128, 4.86187\n52.35228, 4.92669\n52.3785, 4.85893\n52.35765, 4.90284\n52.29165, 4.99316\n52.35759973014370, 4.905933873025140\n52.35328, 4.83378\n52.37862, 4.8865\n52.36938, 4.86266\n52.3723, 4.87349\n52.3598, 4.93642\n52.38147, 4.85489\n52.38151, 4.88917\n52.38137, 4.88872\n52.39551, 4.90906\n52.34516, 4.86432\n52.39461, 4.91771\n52.35373, 4.90327\n52.34679, 4.80295\n52.38269, 4.87015\n52.36951, 4.91187\n52.37153, 4.88022\n52.38011, 4.85607\n52.35546, 4.90394\n52.362648, 4.851774\n52.38007, 4.87164\n52.37308, 4.89964\n52.37196425969390, 4.848382455630990\n52.37315, 4.88271\n52.3721, 4.94389\n52.36744, 4.86783\n52.37977, 4.85926\n52.37851, 4.84993\n52.36116, 4.86508\n52.34517, 4.90242\n52.36154, 4.91452\n52.3718, 4.90774\n52.35982, 4.86042\n52.36309, 4.84393\n52.36136, 4.86495\n52.36554, 4.90685\n52.38460515749170, 4.887602329254150\n52.37866, 4.85368\n52.3586, 4.86061\n52.36891, 4.92975\n52.36863, 4.88051\n52.36795, 4.89861\n52.3565, 4.89848\n52.36215, 4.85533\n52.375332, 4.846978\n52.36026, 4.895207\n52.38954, 4.8909\n52.38768, 4.88455\n52.3567, 4.85713\n52.38094, 4.91249\n52.3522, 4.88401\n52.36381, 4.9144\n52.35636, 4.91434\n52.35589, 4.90957\n52.37301, 4.88198\n52.37933, 4.84754\n52.36289, 4.86817\n52.35471, 4.89643\n52.35197, 5.00199\n52.3906, 4.88734\n52.3532, 4.92505\n52.36537, 4.93583\n52.34391, 4.90139\n52.38308, 4.87218\n52.40054, 4.91437\n52.37833, 4.84311\n52.35791, 4.89714\n52.33217, 4.88236\n52.36874, 4.92697\n52.37599, 4.94638\n52.358, 4.89979\n52.38669, 4.91925\n52.3529715, 4.910986299999990\n52.34932, 4.86891\n52.33957, 4.91788\n52.35564, 4.83142\n52.3582, 4.92337\n52.36601, 4.93361\n52.34705, 4.79025\n52.37004, 4.86469\n52.38345, 4.87851\n52.36831, 4.89939\n52.3498, 4.83105\n52.38046, 4.87091\n52.37981, 4.87418\n52.3792, 4.87433\n52.38813, 4.87861\n52.3718, 4.86743\n52.40987, 4.92275\n52.33054, 4.89016\n52.35596, 4.8886\n52.35942, 4.85676\n52.34256, 4.9087\n52.35669, 4.90246\n52.36831, 4.85443\n52.38741, 4.95725\n52.40611, 4.93303\n52.374493, 4.948655\n52.36467, 4.94011\n52.3891, 4.8905\n52.38483, 4.85153\n52.37028, 4.89022\n52.36161, 4.86998\n52.37994, 4.88759\n52.36446, 4.93719\n52.36537, 4.82862\n52.35107, 4.90943\n52.36839, 4.85363\n52.35244, 4.89095\n52.36412, 4.86165\n52.35537, 4.99057\n52.3729, 4.89869\n52.34154, 4.90023\n52.36161, 4.89083\n52.38219, 4.84777\n52.380138, 4.887468\n52.34245, 4.90099\n52.38535, 4.91641\n52.36608, 4.8764\n52.37498, 4.84607\n52.38265, 4.89196\n52.35688, 4.94525\n52.36472, 4.87417\n52.37165, 4.93705\n52.3807, 4.85693\n52.38724, 4.88051\n52.35297, 4.86058\n52.365757209227100, 4.879257665561940\n52.35734, 4.89731\n52.35449, 4.8919\n52.37055, 4.88248\n52.33335, 4.89973\n52.37367, 4.90027\n52.3575, 4.91379\n52.37328, 4.9026\n52.36537028111370, 4.852313923014270\n52.35412, 4.89504\n52.37145, 4.90164\n52.35177, 4.88864\n52.37634, 4.86033\n52.36428, 4.93597\n52.34332, 4.92333\n52.4013, 4.90201\n52.37932, 4.87903\n52.38891, 4.95377\n52.37456, 4.89188\n52.36707, 4.8726\n52.38981, 4.94945\n52.36262, 4.93145\n52.3666, 4.93003\n52.37003, 4.8779\n52.37451221604470, 4.8344098910581600\n52.35083, 4.92117\n52.37334, 4.87243\n52.39112, 4.88785\n52.37249, 4.89244\n52.394, 4.87882\n52.35564, 4.88898\n52.35537, 4.89806\n52.3603, 4.97647\n52.35666, 4.99979\n52.37327, 4.88363\n52.36497, 4.82948\n52.34835, 4.88619\n52.35472, 4.85072\n52.35795, 4.85598\n52.35076, 4.88956\n52.37819, 4.89259\n52.38091, 4.88837\n52.37928, 4.89041\n52.38105, 4.88765\n52.37333, 4.86027\n52.35471, 4.89586\n52.3578, 4.78678\n52.36768, 4.86227\n52.35348, 4.85633\n52.375, 4.86429\n52.37101, 4.86478\n52.35715, 4.8603\n52.36045, 4.98039\n52.38502, 4.85134\n52.39591, 4.9098\n52.35896, 4.8701\n52.39314, 4.92747\n52.37684, 4.82377\n52.38366, 4.87186\n52.38252, 4.877\n52.37898, 4.87498\n52.37097, 4.86182\n52.35147, 4.8306\n52.36759, 4.89894\n52.371561, 4.872603\n52.35601, 4.91086\n52.36459, 4.93512\n52.41717, 4.89798\n52.35126, 4.85367\n52.32158, 4.98743\n52.37186, 4.90793\n52.3628, 4.90854\n52.36277, 4.88854\n52.35198, 4.89488\n52.34699, 4.91347\n52.37534, 4.88118\n52.38423, 4.87159\n52.36745, 4.87642\n52.40667, 4.90481\n52.36096, 4.87733\n52.38234, 4.88296\n52.36814, 4.86646\n52.36851, 4.86278\n52.38307, 4.88036\n52.3605, 4.86495\n52.41079, 4.89465\n52.35647, 4.91453\n52.35828, 4.90187\n52.3612, 4.87751\n52.3686, 4.87465\n52.35723, 4.85696\n52.38414, 4.87603\n52.34156, 4.90765\n52.36446, 4.87659\n52.34965, 4.79548\n52.35516, 4.89633\n52.37182, 4.94153\n52.36455, 4.87381\n52.39147, 4.88794\n52.35104, 4.90813\n52.38001, 4.88587\n52.37587, 4.83867\n52.34282, 4.84821\n52.36968, 4.8917\n52.37065, 4.89467\n52.35378, 4.88702\n52.34959, 4.91402\n52.3647, 4.92516\n52.36379, 4.94369\n52.36057, 4.9909\n52.36883, 4.89309\n52.36831, 4.89463\n52.40069, 4.91475\n52.3431, 4.90923\n52.35963, 4.86931\n52.35433, 4.93445\n52.36641, 4.85167\n52.36066, 4.87167\n52.38122, 4.87973\n52.38101, 4.87982\n52.38351, 4.88487\n52.34508, 4.86093\n52.37478, 4.84431\n52.38011, 4.89189\n52.38005, 4.8919\n52.372551, 4.881616\n52.39306, 4.93641\n52.35602, 4.88421\n52.35508, 4.94035\n52.35416, 4.87901\n52.37534, 4.84812\n52.35079, 4.85324\n52.31562, 4.95312\n52.37756, 4.8496\n52.37425, 4.86655\n52.37779, 4.87329\n52.37597, 4.94647\n52.3832, 4.87006\n52.35564, 4.86494\n52.39363, 4.91097\n52.35182, 4.89662\n52.37903, 4.88377\n52.36873, 4.85616\n52.38594, 4.90731\n52.35448, 4.88959\n52.35199, 4.90477\n52.40627, 4.93407\n52.40872, 4.90547\n52.36053, 4.86473\n52.36747, 4.85006\n52.36326, 4.85601\n52.34738, 4.86189\n52.37933, 4.84745\n52.37118, 4.84928\n52.37962, 4.84779\n52.39527, 4.99237\n52.35042, 4.91603\n52.38865, 4.88074\n52.378363151765100, 4.93164826417936\n52.3777, 4.94521\n52.36553, 4.87133\n52.3788, 4.88539\n52.38989, 4.88278\n52.38553, 4.91672\n52.37375, 4.90227\n52.35355, 4.91367\n52.36615, 4.87549\n52.35011, 4.89958\n52.38579, 4.87923\n52.34644, 4.85845\n52.35868, 4.91359\n52.36177, 4.82744\n52.3464, 4.89778\n52.35096, 4.89045\n52.37242, 4.92064\n52.37278, 4.9471\n52.36242, 4.93798\n52.35733, 4.88526\n52.35821, 4.99557\n52.35843, 4.91181\n52.37696, 4.85515\n52.40303, 4.93719\n52.35979, 4.85529\n52.35213, 4.8898\n52.35645, 4.89497\n52.3681, 4.86398\n52.35455, 4.83188\n52.39406, 4.92676\n52.36944, 4.86961\n52.3675, 4.86676\n52.36044, 4.89438\n52.36978, 4.92169\n52.36927, 4.84917\n52.33513, 4.87134\n52.38119, 4.88845\n52.38684, 4.88304\n52.37656, 4.87394\n52.36426, 4.90796\n52.38374, 4.88524\n52.374886, 4.821786\n52.38499245000470, 4.890002542648670\n52.40635, 4.99133\n52.37677, 4.85017\n52.34668, 4.8071\n52.34865, 4.80829\n52.35861, 4.92072\n52.34850627033650, 4.877814494445570\n52.37815, 4.88604\n52.38944, 4.88201\n52.364, 4.89746\n52.36666, 4.86571\n52.37517, 4.84677\n52.36464, 4.87741\n52.35105, 4.88612\n52.35484, 4.94095\n52.35274, 4.8787\n52.36258, 4.87522\n52.36479, 4.87741\n52.36804, 4.87644\n52.38027, 4.9051\n52.37062, 4.88043\n52.36469, 4.90817\n52.35154, 4.89123\n52.361, 4.98202\n52.38318, 4.87295\n52.381691, 4.879816\n52.37973, 4.89378\n52.38474, 4.90903\n52.34923, 5.00622\n52.42395, 4.88681\n52.36627, 4.89727\n52.35645, 4.90875\n52.37654, 4.87555\n52.37209, 4.8536\n52.35307, 4.92607\n52.36547, 4.88371\n52.36774, 4.88885\n52.36503, 4.84466\n52.35224, 4.92836\n52.31308, 4.95062\n52.36099, 4.89486\n52.33797, 4.86804\n52.3531, 4.8465\n52.35291, 4.91482\n52.37799, 4.88499\n52.36626, 4.8658\n52.38479, 4.87723\n52.35565, 4.99339\n52.35678, 4.99811\n52.32137, 4.94786\n52.37185, 4.93894\n52.37236, 4.89268\n52.35503, 4.89936\n52.37003, 4.89923\n52.39565, 4.87874\n52.381031, 4.886838\n52.36241, 4.90342\n52.36659, 4.84523\n52.37012, 4.8806\n52.37145, 4.85239\n52.35227, 4.91636\n52.38389, 4.8352\n52.37916, 4.89514\n52.37279, 4.90634\n52.37323, 4.90794\n52.35011, 4.90639\n52.34048, 4.90743\n52.35871, 4.8619\n52.34776, 4.77631\n52.37007, 4.93717\n52.36963, 4.85998\n52.35293, 5.00111\n52.39698, 4.93907\n52.39898, 4.90643\n52.34874, 5.01193\n52.34406, 4.89151\n52.36804, 4.89773\n52.35717, 4.89633\n52.34483, 4.89754\n52.34766, 4.90066\n52.34917, 4.89479\n52.35966, 4.8924\n52.39159, 4.90806\n52.35445, 5.00447\n52.39086, 4.93373\n52.36265, 4.85688\n52.36602, 4.93165\n52.35814, 4.99973\n52.35923, 4.85851\n52.38758, 4.88309\n52.37692, 4.88733\n52.37556, 4.96829\n52.39591, 4.93914\n52.39079, 4.8811\n52.3545, 4.89119\n52.38273, 4.86319\n52.40916, 4.90137\n52.35436, 5.00273\n52.36944, 4.8634\n52.37169, 4.85677\n52.38328, 4.88591\n52.37472, 4.90784\n52.36283, 4.90966\n52.37528, 4.92351\n52.36952, 4.88557\n52.36258, 4.89731\n52.38343, 4.91061\n52.41868, 4.90114\n52.3585, 4.8551\n52.35909, 4.92099\n52.3514, 4.85081\n52.35503, 4.93193\n52.41928, 4.90233\n52.35432, 4.87868\n52.36955, 4.9128\n52.36646, 4.87718\n52.35951, 4.86997\n52.35016, 4.89181\n52.3532, 4.83048\n52.37699, 4.87754\n52.38304, 4.88376\n52.37126, 4.88618\n52.34697, 4.89606\n52.3701251, 4.8724015\n52.39974, 4.90415\n52.36123, 4.86199\n52.38247, 4.85204\n52.36193, 4.9234\n52.35069, 4.89023\n52.36117, 4.86297\n52.3838, 4.88539\n52.35107, 4.84815\n52.34303, 4.79768\n52.38962, 4.87773\n52.39034, 4.88392\n52.35419, 4.90036\n52.37355, 4.87773\n52.35957, 4.93327\n52.35457, 4.89479\n52.37745, 4.86003\n52.37994, 4.8758\n52.36164, 4.85896\n52.35585, 4.92528\n52.36937, 4.85477\n52.37097, 4.89707\n52.37387, 4.8934\n52.35459, 4.89837\n52.35361, 4.8858\n52.3583, 4.91761\n52.36756, 4.86804\n52.3666, 4.89824\n52.35179, 4.8513\n52.39142, 4.93783\n52.38919, 4.93684\n52.35109, 4.84938\n52.37243, 4.86486\n52.3594, 4.9065\n52.38109, 4.8879\n52.35234, 4.8843\n52.37622, 4.88068\n52.35445, 4.89711\n52.35682, 4.89633\n52.38909, 4.87677\n52.3532, 5.00861\n52.38588, 4.91381\n52.4084, 4.9046\n52.38436, 4.83226\n52.35692, 4.92532\n52.37109, 4.85758\n52.32835, 4.97946\n52.34717, 4.84824\n52.3631, 4.86326\n52.35094, 4.83096\n52.36185, 4.99118\n52.33312, 4.80405\n52.40632, 4.90879\n52.3484, 4.84806\n52.35293, 4.85016\n52.35139, 5.00243\n52.37425, 4.90516\n52.35222, 4.85456\n52.34548, 4.9486\n52.38209, 4.83672\n52.3828, 4.82627\n52.37352, 4.82235\n52.3691, 4.91715\n52.38109, 4.89034\n52.38094, 4.88891\n52.36968, 4.88171\n52.38348, 4.8267\n52.37013, 4.89299\n52.36331, 4.85331\n52.34524, 4.90216\n52.35545, 4.8918\n52.36228, 4.85832\n52.39847, 4.90785\n52.37051, 4.93518\n52.35324, 4.86853\n52.37731, 4.88397\n52.36251, 4.9392\n52.36654, 4.85325\n52.39146, 4.88747\n52.3564, 4.87395\n52.35244, 4.85007\n52.35939, 4.78478\n52.38423, 4.91738\n52.34336, 4.89532\n52.40679, 4.93145\n52.37227, 4.94747\n52.33817, 4.94477\n52.363, 4.86704\n52.36557, 4.88776\n52.36254656087640, 4.978731517199060\n52.38543, 4.86965\n52.37449, 4.88778\n52.37326, 4.86409\n52.35273402524530, 4.889135009663760\n52.36586, 4.88602\n52.35503, 4.88099\n52.41056, 4.89867\n52.38282, 4.88729\n52.38864, 4.90941\n52.36535, 4.91911\n52.35124, 4.85873\n52.36193, 4.91499\n52.36448, 4.85621\n52.37203, 4.9013\n52.36413, 4.85514\n52.36465, 4.89798\n52.3806, 4.88695\n52.29361, 4.98097\n52.41943, 4.87126\n52.37156, 4.88617\n52.37258, 4.90196\n52.36023, 4.8378\n52.37633, 4.89509\n52.38594, 4.91714\n52.3807, 4.88336\n52.35407, 4.88411\n52.41833, 4.90286\n52.37668, 4.95503\n52.36271, 4.87224\n52.32667, 4.94629\n52.35463, 4.91157\n52.38061, 4.87428\n52.3559095, 4.9252608\n52.36227, 4.88732\n52.39713, 4.9573\n52.37819, 4.89192\n52.37878, 4.86899\n52.38168, 4.88328\n52.30057, 4.98696\n52.33532, 4.80079\n52.34875, 5.00692\n52.366, 4.94395\n52.3646, 4.86956\n52.39271, 4.94406\n52.36177, 4.92791\n52.36672, 4.85214\n52.38136, 4.88444\n52.36539, 4.87511\n52.3544, 4.86913\n52.34799, 4.84971\n52.3557, 4.88942\n52.34669, 4.89401\n52.37462, 4.85887\n52.3641, 4.83262\n52.36478, 4.87617\n52.35114, 4.93724\n52.3737, 4.85394\n52.36473, 4.88133\n52.37427, 4.88327\n52.37567, 4.86431\n52.35917, 4.87933\n52.36665, 4.88254\n52.35123, 4.89977\n52.34212, 4.79794\n52.36597, 4.89975\n52.36407, 4.85862\n52.38408, 4.84556\n52.32781, 4.9808\n52.35616, 4.90896\n52.37126, 4.9154\n52.37096, 4.89621\n52.35711, 4.88806\n52.38291, 4.87678\n52.414211, 4.920321\n52.37048, 4.85848\n52.37874, 4.88263\n52.37201, 4.93964\n52.34187, 4.86691\n52.35788, 4.88937\n52.35705, 4.90705\n52.41054, 4.9539\n52.40046, 4.90433\n52.35678, 4.93472\n52.35211, 4.887236\n52.3255, 4.94759\n52.35411, 4.89388\n52.35681, 4.88872\n52.35229, 4.81457\n52.3826, 4.87473\n52.35317, 4.92267\n52.38232, 4.86988\n52.34989, 4.84909\n52.36573, 4.88748\n52.36744, 4.86654\n52.37535, 4.83676\n52.38611, 4.89157\n52.35387, 4.93661\n52.35587, 4.92551\n52.36328, 4.94173\n52.36341, 4.90045\n52.38037, 4.87351\n52.36498, 4.93227\n52.36997, 4.867\n52.3691, 4.89036\n52.36324, 4.89638\n52.372, 4.84921\n52.37033, 4.84936\n52.36919, 4.86663\n52.3920624, 4.9297785\n52.36456, 4.94154\n52.34191, 4.89484\n52.37613, 4.87697\n52.37194, 4.88668\n52.36444, 4.93541\n52.36865, 4.86828\n52.390259, 4.888995\n52.36893, 4.89729\n52.38446, 4.8899\n52.36751, 4.85989\n52.36985, 4.87888\n52.35631, 4.99875\n52.41324, 4.89205\n52.36709, 4.86575\n52.3723, 4.89851\n52.37695, 4.88635\n52.38023, 4.89248\n52.37037, 4.89785\n52.38391, 4.87971\n52.37798, 4.94299\n52.37196, 4.84775\n52.37200164794920, 4.896499156951900\n52.37034, 4.90688\n52.35687, 4.93361\n52.41859, 4.87143\n52.3703, 4.87448\n52.37113, 4.89388\n52.36214, 4.87618\n52.40049, 4.90431\n52.35447, 4.89479\n52.34812, 4.84891\n52.41947, 4.87136\n52.38164, 4.8675\n52.37721, 4.84999\n52.31754, 4.98675\n52.39852, 4.91651\n52.38501, 4.86642\n52.3749, 4.90543\n52.358713359279700, 4.906113223833390\n52.36378, 4.866\n52.3775, 4.88771\n52.37596, 4.89541\n52.36249, 4.86255\n52.36665, 4.8072\n52.38559166412630, 4.85511327051543\n52.38001, 4.88879\n52.36147, 4.89189\n52.35228, 4.92039\n52.37602, 4.8854\n52.37567, 4.88755\n52.37788, 4.89121\n52.41843, 4.87173\n52.37592, 4.85855\n52.36208, 4.85095\n52.37204, 4.89629\n52.29132, 4.96829\n52.29307, 4.96851\n52.3549, 4.87937\n52.35498, 5.00602\n52.35358, 4.93097\n52.37894, 4.87089\n52.3828706, 4.8719611\n52.3567, 4.88879\n52.35593, 4.89857\n52.36369, 4.93272\n52.39844, 4.8938\n52.39946, 4.89587\n52.39812, 4.89535\n52.37647, 4.84639\n52.36337, 4.87484\n52.35192, 4.85689\n52.36808, 4.87323\n52.34611, 4.89266\n52.41859, 4.87143\n52.35124, 4.91228\n52.353, 4.90027\n52.36778, 4.89942\n52.37447, 4.89204\n52.32539, 4.94657\n52.37616, 4.87377\n52.3934, 4.90731\n52.36463, 4.85722\n52.39205, 4.90537\n52.404243, 4.901983\n52.35079, 4.90278\n52.31997, 4.94448\n52.37884, 4.8541\n52.374, 4.86199\n52.35411, 4.85054\n52.40696, 4.93091\n52.36063, 4.94611\n52.38245, 4.82909\n52.35042, 4.9146\n52.36714, 4.87605\n52.35858, 4.89487\n52.35688, 4.89885\n52.373627, 4.872984\n52.34604, 4.92992\n52.37601, 4.89144\n52.36146, 4.89839\n52.37447, 4.9046\n52.37862, 4.88482\n52.41681, 4.88411\n52.36174, 4.86483\n52.36251, 4.90954\n52.3503, 4.83609\n52.3515, 4.9983\n52.35515, 4.90155\n52.36235, 4.85509\n52.36337, 4.85637\n52.36631, 4.85752\n52.3548, 5.00126\n52.35767, 4.92111\n52.34856, 4.91022\n52.36777, 4.84222\n52.41947, 4.87136\n52.34997, 4.88727\n52.3542, 4.99427\n52.38241, 4.87183\n52.35305, 4.90107\n52.37711, 4.8847\n52.34137, 4.91695\n52.35307, 4.89153\n52.36767, 4.86774\n52.3647413, 4.8803424\n52.36802, 4.88603\n52.35874, 4.86016\n52.35158, 4.92036\n52.381, 4.88677\n52.3614, 4.91153\n52.35381, 4.89533\n52.38535, 4.90764\n52.35457, 4.86959\n52.36395, 4.93321\n52.35175, 4.90276\n52.38217, 4.90775\n52.37629, 4.87618\n52.35091, 4.84867\n52.3699429, 4.9302286\n52.36005, 4.98335\n52.3948, 4.91654\n52.37461, 4.87819\n52.35704, 4.93872\n52.36162, 4.86544\n52.35558, 4.83323\n52.34859, 4.90265\n52.36884, 4.86739\n52.36982, 4.85\n52.34406, 4.89874\n52.37196, 4.90404\n52.38176, 4.88946\n52.35595, 4.92526\n52.36971, 4.84919\n52.33984, 4.92123\n52.36825, 4.87411\n52.37015, 4.91369\n52.3735, 4.94446\n52.38757, 4.88164\n52.36437, 4.94105\n52.36029, 4.92508\n52.37749, 4.89104\n52.34948, 4.87911\n52.37677, 4.8756\n52.38153, 4.87691\n52.37236, 4.87863\n52.33211, 4.90139\n52.34239, 4.90784\n52.361385345458900, 4.893290042877190\n52.33309, 4.87047\n52.36946, 4.86441\n52.41786, 4.88603\n52.37273, 4.89294\n52.39592, 4.91316\n52.35705, 4.99435\n52.32143, 4.94541\n52.37793, 4.88101\n52.37858, 4.88252\n52.36004, 4.85154\n52.38951, 4.87912\n52.36641, 4.87493\n52.38146, 4.87547\n52.36461, 4.85876\n52.30688, 4.983\n52.36256, 4.90819\n52.36643, 4.87465\n52.37787, 4.85125\n52.37837, 4.85157\n52.35759, 4.87369\n52.377453, 4.8901\n52.36462, 4.93706\n52.34678, 4.86251\n52.37757, 4.89514\n52.35225, 4.80131\n52.3705, 4.91294\n52.36144, 4.86687\n52.35715, 4.86032\n52.38453, 4.87098\n52.38768, 4.88021\n52.37229, 4.9441\n52.355701, 4.889535\n52.37839, 4.85146\n52.39682, 4.9038\n52.35869, 4.8972\n52.41587, 4.90767\n52.3936, 4.94033\n52.36917, 4.92144\n52.37341, 4.84889\n52.38169, 4.89023\n52.36188, 4.92849\n52.34178, 4.90241\n52.35827, 5.00004\n52.35148, 4.91753\n52.36569, 4.93921\n52.36136, 4.86775\n52.37384, 4.87826\n52.32727, 4.94662\n52.37882, 4.82871\n52.36117, 4.857\n52.40147, 4.91897\n52.37994, 4.85716\n52.36286, 4.90576\n52.37618, 4.8847\n52.34447, 4.86642\n52.36401, 4.86918\n52.37182, 4.94325\n52.34828, 4.91217\n52.35132, 4.9113\n52.36375, 4.89421\n52.37626, 4.88655\n52.3629, 4.85575\n52.3041, 5.01667\n52.37189, 4.87735\n52.37532, 4.89632\n52.39773, 4.90573\n52.3596, 4.92656\n52.37478, 4.89985\n52.36486, 4.90883\n52.35198, 4.93675\n52.37478, 4.89985\n52.37506, 4.88305\n52.37055, 4.86907\n52.40365, 4.9305\n52.3551, 4.92993\n52.36739, 4.88015\n52.36926, 4.87991\n52.35291, 4.90985\n52.3619, 4.90392\n52.37222, 4.86226\n52.35807, 4.9\n52.36878, 4.85183\n52.37038, 4.85668\n52.34965, 4.85504\n52.35006, 5.01187\n52.37519, 4.91748\n52.35983, 4.90791\n52.40532, 4.90904\n52.35689, 4.99314\n52.35737800052720, 4.850844184198540\n52.35501, 4.89342\n52.34818, 4.90577\n52.36794, 4.93965\n52.36978, 4.92153\n52.37342, 4.90756\n52.36934, 4.83174\n52.3841, 4.90412\n52.38512, 4.87079\n52.3918, 4.93098\n52.35377, 4.90116\n52.36719, 4.86747\n52.34203, 4.85033\n52.36745, 4.8757\n52.37992, 4.9698\n52.35624, 4.85083\n52.38979, 4.87498\n52.36012, 4.89513\n52.37084, 4.84892\n52.36882, 4.88213\n52.41044, 4.90729\n52.35065, 4.94215\n52.37977, 4.87904\n52.37191, 4.90042\n52.35261, 4.80676\n52.371468, 4.879234\n52.36824, 4.86689\n52.34988, 4.87967\n52.35207, 4.88953\n52.34398, 4.80157\n52.39231, 4.92461\n52.36998, 4.88458\n52.36441, 4.93942\n52.38801, 4.95684\n52.3649, 4.93741\n52.35453, 4.90267\n52.36452, 4.91023\n52.34638, 5.00685\n52.35602, 4.88901\n52.40896, 4.9007\n52.36357, 4.8684\n52.40661, 4.89922\n52.35153, 4.91762\n52.41417, 4.89009\n52.34456, 4.91576\n52.3565, 4.8902\n52.36483, 4.87063\n52.37273, 4.90743\n52.355507250063500, 4.897487207923270\n52.38259, 4.87833\n52.36017, 4.84902\n52.3609, 4.83942\n52.35388, 4.93476\n52.37414, 4.89404\n52.36866, 4.8868\n52.36325, 4.90303\n52.36636, 4.86407\n52.37109, 4.929013\n52.378647, 4.881075\n52.35441632501120, 4.891174998741800\n52.37109, 4.929013\n52.40033, 4.91447\n52.3499, 4.93729\n52.30691, 4.97676\n52.37069, 4.87153\n52.35689, 4.91209\n52.35638, 4.99051\n52.38602, 4.88867\n52.34975, 4.9029\n52.37262, 4.92229\n52.37756, 4.85968\n52.36153, 4.87331\n52.35698, 4.89964\n52.36682, 4.85248\n52.36303, 4.85919\n52.37556, 4.87539\n52.36137, 4.89481\n52.38012, 4.99679\n52.34915, 4.78785\n52.35379, 4.90109\n52.38159, 4.88477\n52.36646, 4.8522\n52.35878, 4.89733\n52.37511, 4.88313\n52.39147, 4.88684\n52.37938, 4.87481\n52.37334, 4.96385\n52.34216, 4.91153\n52.36535, 4.85131\n52.37277, 4.87116\n52.36699, 4.8551\n52.36244, 4.86347\n52.32289, 4.98336\n52.36685, 4.89801\n52.35864, 5.00019\n52.36915, 4.91651\n52.37848, 4.84791\n52.37704, 4.85514\n52.37721, 4.89006\n52.37268, 4.86566\n52.35657, 4.89339\n52.38798, 4.889\n52.36338, 4.88307\n52.29474, 4.97227\n52.36536, 4.87975\n52.36288, 4.88487\n52.36338, 4.88307\n52.37946, 4.8905\n52.40845, 4.90128\n52.363450635993, 4.938777958032860\n52.36158, 4.86126\n52.37382, 4.88035\n52.37662, 4.88696\n52.38028, 4.87127\n52.35507, 4.9925\n52.36623764038080, 4.8752899169921800\n52.40868, 4.90556\n52.353, 4.92922\n52.3766, 4.90207\n52.333031, 4.903041\n52.37354, 4.85981\n52.35024, 4.9088\n52.34662, 4.89105\n52.35254, 4.88516\n52.35183, 4.88692\n52.36354, 4.90477\n52.34937, 4.93952\n52.41973, 4.87078\n52.35487, 4.87933\n52.3859, 4.86901\n52.36908, 4.85853\n52.35701, 4.89798\n52.35283, 4.88292\n52.41153, 4.90695\n52.37403, 4.93998\n52.3594, 4.89286\n52.35602, 4.91945\n52.38299, 4.8737\n52.37743, 4.86927\n52.36501, 4.86378\n52.38329, 4.88865\n52.35504, 4.85454\n52.37314, 4.95031\n52.37088, 4.86699\n52.37035, 4.88609\n52.37035, 4.8861\n52.3161, 4.96034\n52.39412, 4.92613\n52.37452, 4.86418\n52.39139, 4.9548\n52.36009, 4.94519\n52.38556, 4.91348\n52.38306, 4.84776\n52.35067, 4.89825\n52.36469, 4.87998\n52.38408, 4.87825\n52.36639, 4.8993\n52.37292, 4.87732\n52.39779, 4.90768\n52.39991, 4.90474\n52.37531, 4.88068\n52.34642, 4.89586\n52.37703, 4.86066\n52.36214, 4.94289\n52.37579, 4.89751\n52.40277, 4.91751\n52.3541, 4.93266\n52.34735, 4.898\n52.3766, 4.90207\n52.36434, 4.85665\n52.37855, 4.8548\n52.34424, 4.90868\n52.3612855, 4.862439999999990\n52.37428, 4.87633\n52.37379, 4.89689\n52.37478, 4.83669\n52.35644, 5.00369\n52.37306, 4.88225\n52.37395, 4.96555\n52.37685, 4.84859\n52.37311, 4.8632\n52.3527, 5.00711\n52.36321, 4.86722\n52.35897, 4.8602\n52.36655, 4.92385\n52.36728, 4.87394\n52.3643, 4.88867\n52.37625, 4.77802\n52.35618, 4.89822\n52.357765, 4.902114\n52.35439, 4.99451\n52.38071, 4.88212\n52.3122, 4.95602\n52.41985, 4.90131\n52.39443, 4.94763\n52.3737, 4.8634\n52.37181, 4.85258\n52.35269, 4.94626\n52.36479, 4.94271\n52.3642, 4.93906\n52.3434944152832, 4.912582874298090\n52.357243, 4.902189\n52.37725, 4.89373\n52.34356, 4.90231\n52.35743, 4.89992\n52.34637, 4.88698\n52.34716, 4.88712\n52.42054, 4.90881\n52.372, 4.85019\n52.35992, 4.86314\n52.34933, 4.88766\n52.3907, 4.90879\n52.41456, 4.88751\n52.39189, 4.87231\n52.35715, 4.93356\n52.40677, 4.93116\n52.34872, 4.87412\n52.37266, 4.90532\n52.41793, 4.90119\n52.37868, 4.84789\n52.37041, 4.86914\n52.35468, 4.89332\n52.3645423092409, 4.842138697770550\n52.35435, 4.99438\n52.38488, 4.87282\n52.3542, 4.99139\n52.36131, 4.86073\n52.31899, 4.95651\n52.37616, 4.87117\n52.36785, 4.87644\n52.36366, 4.98529\n52.37799, 4.88663\n52.35253, 4.88294\n52.37081, 4.94444\n52.31021, 5.01813\n52.3639, 4.93921\n52.38488, 4.87063\n52.3620405, 4.8544971\n52.3553, 4.92757\n52.37017, 4.87174\n52.349594, 4.890385\n52.37191, 4.89558\n52.37122, 4.89597\n52.3643, 4.88867\n52.3643, 4.88867\n52.3643, 4.88867\n52.3643, 4.88867\n52.3643, 4.88867\n52.3643, 4.88867\n52.35965, 4.91302\n52.344, 4.86365\n52.38887, 4.88591\n52.3719, 4.8728\n52.37263, 4.81227\n52.39128, 4.93562\n52.35363, 4.8496\n52.3568, 4.93252\n52.3741, 4.85735\n52.3643, 4.88867\n52.36962, 4.87206\n52.34602, 4.86212\n52.40046, 4.89279\n52.39123, 4.94457\n52.39242, 4.92422\n52.34182, 4.90378\n52.37588, 4.87486\n52.37468, 4.87818\n52.3665, 4.85041\n52.36647, 4.85042\n52.36393, 4.88797\n52.36004389359510, 4.860345804894070\n52.3776, 4.98666\n52.36084084234740, 4.887649105699490\n52.39106, 4.93726\n52.35931, 4.98881\n52.36169, 4.90545\n52.36827, 4.86519\n52.35214, 4.88866\n52.37061, 4.8701\n52.40044, 4.90055\n52.381081, 4.966337\n52.35685, 4.89652\n52.37859, 4.89613\n52.34551, 4.87582\n52.37894, 4.88327\n52.35555, 4.85095\n52.3671, 4.87643\n52.37659, 4.85362\n52.35552, 4.89111\n52.31818, 4.95891\n52.36704, 4.85967\n52.3452, 4.86311\n52.37474, 4.96548\n52.38588, 4.87574\n52.35, 4.86278\n52.36076, 4.85715\n52.33466, 4.84915\n52.36399, 4.93729\n52.35591, 4.90813\n52.38635, 4.88071\n52.38259, 4.88534\n52.35268, 4.86377\n52.32061, 4.94373\n52.33318, 4.87411\n52.36418, 4.88352\n52.35312, 4.9238\n52.35489, 4.88946\n52.35472, 4.88839\n52.36495, 4.93107\n52.3822, 4.87163\n52.35219, 4.91761\n52.37822, 4.85454\n52.37375, 4.96838\n52.36294, 4.86702\n52.38241, 4.88165\n52.3923, 4.93214\n52.36013, 4.92895\n52.40035, 4.91375\n52.33288, 4.87265\n52.36003, 4.9345\n52.35882, 4.85991\n52.34488, 4.90222\n52.36191, 4.86602\n52.35339, 4.93679\n52.34336, 4.89708\n52.35777, 4.8518\n52.36706, 4.87265\n52.35289, 4.90798\n52.3753, 4.87233\n52.36842, 4.88223\n52.3747, 4.864\n52.38455, 4.85246\n52.3732, 4.97148\n52.35024, 4.84693\n52.35378, 4.83614\n52.35728, 4.93247\n52.35017, 4.88996\n52.35281, 4.91321\n52.38057, 4.89036\n52.367739, 4.852531\n52.37015, 4.85394\n52.35522, 4.83567\n52.35665, 4.88819\n52.41237, 4.88696\n52.35907, 4.84999\n52.39062, 4.88676\n52.35382, 4.86792\n52.35767, 4.92018\n52.35015, 4.88745\n52.32766, 4.87296\n52.36384, 4.90131\n52.37387, 4.86441\n52.34181, 4.89459\n52.36060333251950, 4.896457195281980\n52.36060333251950, 4.896457195281980\n52.37187, 4.89809\n52.35751, 4.91019\n52.36624, 4.90245\n52.3924, 4.90881\n52.35360878445210, 4.904235332356380\n52.30787, 5.01839\n52.39905, 4.92058\n52.37096, 4.87687\n52.37097, 4.86825\n52.36287, 4.86486\n52.36571, 4.92649\n52.3423, 4.89716\n52.34387, 4.89191\n52.35152, 5.00107\n52.35032, 4.89049\n52.34506, 4.89749\n52.34609, 4.84872\n52.37768, 4.84698\n52.3561765, 4.9163038\n52.38522, 4.91178\n52.3527, 4.86091\n52.36832, 4.87701\n52.37683, 4.85177\n52.36311, 4.9898\n52.38172, 4.87811\n52.37116, 4.9697\n52.36935, 4.88303\n52.35148, 4.99762\n52.38399, 4.88019\n52.34521, 4.82021\n52.3928, 4.92662\n52.3587, 4.92307\n52.37032, 4.88215\n52.35482, 4.85329\n52.37226, 4.85381\n52.42075, 4.89596\n52.35932, 4.85949\n52.35663, 4.92413\n52.35752, 4.91158\n52.38273, 4.85468\n52.37285, 4.87399\n52.36616, 4.86215\n52.37114, 4.86062\n52.37108, 4.85303\n52.35059, 4.8469\n52.36402, 4.926\n52.3836, 4.86998\n52.359103980680500, 4.979472003945250\n52.36501, 4.94223\n52.39911, 4.90533\n52.42369, 4.88545\n52.35175, 4.90905\n52.40797, 4.92397\n52.35916, 4.93348\n52.36434, 4.92533\n52.35048, 4.84918\n52.357791900634700, 4.877831935882560\n52.38266, 4.86201\n52.38259, 4.85684\n52.37793, 4.89296\n52.40243, 4.91335\n52.40056, 4.91337\n52.36684, 4.8756\n52.3554, 4.89439\n52.34438, 4.89556\n52.35451, 4.85299\n52.39893, 4.92146\n52.37031, 4.91141\n52.3557608, 4.9054873\n52.3833277, 4.8933458\n52.3818, 4.87934\n52.37547, 4.87017\n52.37014, 4.86516\n52.36464, 4.86025\n52.35408, 4.88446\n52.37649, 4.85998\n52.36841, 4.84921\n52.38212, 4.85716\n52.38589, 4.88294\n52.36961, 4.87512\n52.37344, 4.81215\n52.34095, 4.9043\n52.37962, 4.88769\n52.39994, 4.90621\n52.3707, 4.89495\n52.37598, 4.85819\n52.35508, 4.89601\n52.37027, 4.89509\n52.37073, 4.89635\n52.33978, 4.94456\n52.37631, 4.84774\n52.35502, 4.92333\n52.36335937009490, 4.88674896815144\n52.36555, 4.88675\n52.35419, 4.91655\n52.3764, 4.82335\n52.37806, 4.88524\n52.3243, 4.87289\n52.35871, 4.8559\n52.35238, 4.82913\n52.37742, 4.79661\n52.357471, 4.857943\n52.37747, 4.89247\n52.37459, 4.88061\n52.37655, 4.87352\n52.36674, 4.86153\n52.37943, 4.87795\n52.37503, 4.84821\n52.35941, 4.92684\n52.36827026156040, 4.90885817606159\n52.3747, 4.90329\n52.371, 4.88275\n52.359398, 4.825566\n52.37268, 4.86148\n52.34523, 4.90354\n52.37915, 4.88627\n52.37256, 4.86143\n52.35245, 4.90964\n52.36417, 4.93694\n52.37372, 4.90541\n52.35945, 4.89665\n52.36321, 4.93062\n52.35247, 4.93757\n52.36912, 4.90721\n52.36564, 4.87402\n52.35767, 4.89973\n52.363256156604500, 4.942969177989000\n52.35494, 4.89681\n52.372630802834800, 4.9065592512488300\n52.38063, 4.87121\n52.38652, 4.91382\n52.37035, 4.87536\n52.37924, 4.92962\n52.36765, 4.93241\n52.35222, 4.88483\n52.40711, 4.90547\n52.36206, 4.90517\n52.35333, 4.83316\n52.36438, 4.94199\n52.37034, 4.87321\n52.35176, 4.85122\n52.34736, 5.00617\n52.37763, 4.83702\n52.36306, 4.86017\n52.36628, 4.89887\n52.36607, 4.8748\n52.36949, 4.85268\n52.36828, 4.92953\n52.3546823, 5.0060503\n52.35098, 4.93731\n52.36822, 4.88228\n52.3622, 4.86275\n52.3743, 4.89216\n52.34438, 4.90522\n52.36313, 4.83731\n52.37095, 4.89576\n52.37021, 4.89717\n52.36425, 4.93857\n52.35457, 4.86748\n52.3614955, 4.8992162\n52.36526, 4.83346\n52.3781, 4.85682\n52.36405, 4.86553\n52.3945, 4.87829\n52.38067, 4.85032\n52.35336, 4.92818\n52.37454, 4.86253\n52.38044, 4.83816\n52.35862731933590, 4.914225101470940\n52.37405, 4.9063\n52.37853, 4.86042\n52.37628, 4.93929\n52.36523, 4.90022\n52.3534, 4.86534\n52.36034, 4.86364\n52.36082, 4.8238\n52.3634, 4.94316\n52.35216, 4.88947\n52.36393, 4.87508\n52.3824, 4.87273\n52.36769, 4.89981\n52.36579, 4.92868\n52.38772, 4.8893\n52.38739, 4.88823\n52.38855, 4.888612\n52.38766, 4.88958\n52.38937, 4.88945\n52.3874, 4.889\n52.36001, 4.90281\n52.36218, 4.86589\n52.34248, 4.79112\n52.35646, 4.88986\n52.34188, 4.92073\n52.38209, 4.87935\n52.36996841430660, 4.904695987701410\n52.35272, 4.90364\n52.36122, 4.97921\n52.35561, 4.91087\n52.37032, 4.90575\n\n\nGeocoderInsufficientPrivileges: Non-successful status code 403\n\n\n\n#print(geolocs_airbnb.street)\n#It can't get more efficient than this (again)\nprint('Number of Airbnb listings per street:', geolocs_airbnb.street.value_counts())\n\nNumber of Airbnb listings per street: street\nDerde Egelantiersdwarsstraat    81\nKeizersgracht                   39\nNassaukade                      27\nDa Costakade                    23\nWeesperzijde                    22\n                                ..\nAndreas Schelfhoutstraat         1\nLauriergracht                    1\nRuysdaelstraat                   1\nLeeuwendalerspad                 1\nHofwijckstraat                   1\nName: count, Length: 1230, dtype: int64\n\n\n\nprint(ok_listings.columns)\n\nNameError: name 'ok_listings' is not defined\n\n\n\n#print(geolocs_airbnb.street)\n#It can't get more efficient than this (again)\nprint('Number of Airbnb listings per street:', geolocs_airbnb.street.value_counts())\n\nNameError: name 'geolocs_airbnb' is not defined\n\n\n\nprint(ok_listings.columns[68])\n\nNameError: name 'ok_listings' is not defined\n\n\n\nlicenses = (ok_listings.license.nunique())\nlicense_values =(ok_listings.license.value_counts())\nprint(license_values)\nexemptions = (ok_listings.license.value_counts()['Exempt'])\n\nulicenses = licenses-exemptions\nprint('Number of unique Airbnb licenses in Amsterdam (not counting the exempt values):',ulicenses)\n\nNameError: name 'ok_listings' is not defined"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Amsterdam Open Water Swim Meet Report",
    "section": "",
    "text": "This is a report on the feasibility of hosting a 5km open water swimming event through the canals of Amsterdam, based on the theoretical concerns raised by the municipality of Amsterdam.\nKey facts\n\nWhat: The swim has to have a length of 5km.\nWhere: Has to be proposed anywhere in the canals of Amsterdam according to infromation gathered.\nWhen: May 2024\n\nContents of report\n\nFeasibility of event based on water quality\nProposed swim route and event time\nEnergy requirements for event\nProposed location of event headquarters\nAccommodation requirements for tourists"
  }
]